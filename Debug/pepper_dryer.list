
pepper_dryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003338  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003444  08003444  00004444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003470  08003470  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003470  08003470  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003470  08003470  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003470  08003470  00004470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003474  08003474  00004474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003478  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08003484  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003484  00005160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6ad  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002314  00000000  00000000  000136e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  000159f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb6  00000000  00000000  000168f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018043  00000000  00000000  000174a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010276  00000000  00000000  0002f4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c231  00000000  00000000  0003f75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f8c  00000000  00000000  000cb9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000cf960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800342c 	.word	0x0800342c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800342c 	.word	0x0800342c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else
bool	Ds18b20_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8000522:	2305      	movs	r3, #5
 8000524:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8000526:	2208      	movs	r2, #8
 8000528:	4937      	ldr	r1, [pc, #220]	@ (8000608 <Ds18b20_Init+0xec>)
 800052a:	4838      	ldr	r0, [pc, #224]	@ (800060c <Ds18b20_Init+0xf0>)
 800052c:	f000 fb56 	bl	8000bdc <OneWire_Init>
		TempSensorCount = 0;	
 8000530:	4b37      	ldr	r3, [pc, #220]	@ (8000610 <Ds18b20_Init+0xf4>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8000536:	e002      	b.n	800053e <Ds18b20_Init+0x22>
			Ds18b20Delay(100);
 8000538:	2064      	movs	r0, #100	@ 0x64
 800053a:	f001 faa3 	bl	8001a84 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800053e:	f001 fa97 	bl	8001a70 <HAL_GetTick>
 8000542:	4603      	mov	r3, r0
 8000544:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000548:	4293      	cmp	r3, r2
 800054a:	d9f5      	bls.n	8000538 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 800054c:	482f      	ldr	r0, [pc, #188]	@ (800060c <Ds18b20_Init+0xf0>)
 800054e:	f000 fc38 	bl	8000dc2 <OneWire_First>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	4b2f      	ldr	r3, [pc, #188]	@ (8000614 <Ds18b20_Init+0xf8>)
 8000558:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800055a:	e019      	b.n	8000590 <Ds18b20_Init+0x74>
		{
			Ds18b20Delay(100);
 800055c:	2064      	movs	r0, #100	@ 0x64
 800055e:	f001 fa91 	bl	8001a84 <HAL_Delay>
			TempSensorCount++;
 8000562:	4b2b      	ldr	r3, [pc, #172]	@ (8000610 <Ds18b20_Init+0xf4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <Ds18b20_Init+0xf4>)
 800056c:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800056e:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <Ds18b20_Init+0xf4>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	3b01      	subs	r3, #1
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	4a28      	ldr	r2, [pc, #160]	@ (8000618 <Ds18b20_Init+0xfc>)
 8000578:	4413      	add	r3, r2
 800057a:	4619      	mov	r1, r3
 800057c:	4823      	ldr	r0, [pc, #140]	@ (800060c <Ds18b20_Init+0xf0>)
 800057e:	f000 fd34 	bl	8000fea <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8000582:	4822      	ldr	r0, [pc, #136]	@ (800060c <Ds18b20_Init+0xf0>)
 8000584:	f000 fc2d 	bl	8000de2 <OneWire_Next>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <Ds18b20_Init+0xf8>)
 800058e:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8000590:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <Ds18b20_Init+0xf8>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1e1      	bne.n	800055c <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 8000598:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <Ds18b20_Init+0xf4>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d106      	bne.n	80005ae <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1bc      	bne.n	8000526 <Ds18b20_Init+0xa>
 80005ac:	e000      	b.n	80005b0 <Ds18b20_Init+0x94>
			break;
 80005ae:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <Ds18b20_Init+0x9e>
		return false;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e022      	b.n	8000600 <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	71bb      	strb	r3, [r7, #6]
 80005be:	e019      	b.n	80005f4 <Ds18b20_Init+0xd8>
	{
		Ds18b20Delay(50);
 80005c0:	2032      	movs	r0, #50	@ 0x32
 80005c2:	f001 fa5f 	bl	8001a84 <HAL_Delay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <Ds18b20_Init+0xfc>)
 80005cc:	4413      	add	r3, r2
 80005ce:	220c      	movs	r2, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	480e      	ldr	r0, [pc, #56]	@ (800060c <Ds18b20_Init+0xf0>)
 80005d4:	f000 f99a 	bl	800090c <DS18B20_SetResolution>
		Ds18b20Delay(50);
 80005d8:	2032      	movs	r0, #50	@ 0x32
 80005da:	f001 fa53 	bl	8001a84 <HAL_Delay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <Ds18b20_Init+0xfc>)
 80005e4:	4413      	add	r3, r2
 80005e6:	4619      	mov	r1, r3
 80005e8:	4808      	ldr	r0, [pc, #32]	@ (800060c <Ds18b20_Init+0xf0>)
 80005ea:	f000 fa27 	bl	8000a3c <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	3301      	adds	r3, #1
 80005f2:	71bb      	strb	r3, [r7, #6]
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <Ds18b20_Init+0xf4>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	79ba      	ldrb	r2, [r7, #6]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d3e0      	bcc.n	80005c0 <Ds18b20_Init+0xa4>
  }
	return true;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40010800 	.word	0x40010800
 800060c:	20000038 	.word	0x20000038
 8000610:	2000004d 	.word	0x2000004d
 8000614:	2000004c 	.word	0x2000004c
 8000618:	20000028 	.word	0x20000028

0800061c <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool	Ds18b20_ManualConvert(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;	
	#else	
	Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8000622:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <Ds18b20_ManualConvert+0xd4>)
 8000624:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000628:	801a      	strh	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 800062a:	4832      	ldr	r0, [pc, #200]	@ (80006f4 <Ds18b20_ManualConvert+0xd8>)
 800062c:	f000 f868 	bl	8000700 <DS18B20_StartAll>
	Ds18b20Delay(100);
 8000630:	2064      	movs	r0, #100	@ 0x64
 8000632:	f001 fa27 	bl	8001a84 <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 8000636:	e00c      	b.n	8000652 <Ds18b20_ManualConvert+0x36>
	{
		Ds18b20Delay(10);  
 8000638:	200a      	movs	r0, #10
 800063a:	f001 fa23 	bl	8001a84 <HAL_Delay>
		Ds18b20Timeout-=1;
 800063e:	4b2c      	ldr	r3, [pc, #176]	@ (80006f0 <Ds18b20_ManualConvert+0xd4>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	3b01      	subs	r3, #1
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <Ds18b20_ManualConvert+0xd4>)
 8000648:	801a      	strh	r2, [r3, #0]
		if(Ds18b20Timeout==0)
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <Ds18b20_ManualConvert+0xd4>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d006      	beq.n	8000660 <Ds18b20_ManualConvert+0x44>
	while (!DS18B20_AllDone(&OneWire))
 8000652:	4828      	ldr	r0, [pc, #160]	@ (80006f4 <Ds18b20_ManualConvert+0xd8>)
 8000654:	f000 fa4d 	bl	8000af2 <DS18B20_AllDone>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0ec      	beq.n	8000638 <Ds18b20_ManualConvert+0x1c>
 800065e:	e000      	b.n	8000662 <Ds18b20_ManualConvert+0x46>
			break;
 8000660:	bf00      	nop
	}	
	if(Ds18b20Timeout>0)
 8000662:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <Ds18b20_ManualConvert+0xd4>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d024      	beq.n	80006b4 <Ds18b20_ManualConvert+0x98>
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	e01b      	b.n	80006a8 <Ds18b20_ManualConvert+0x8c>
		{
			Ds18b20Delay(100);
 8000670:	2064      	movs	r0, #100	@ 0x64
 8000672:	f001 fa07 	bl	8001a84 <HAL_Delay>
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	011b      	lsls	r3, r3, #4
 800067a:	4a1f      	ldr	r2, [pc, #124]	@ (80006f8 <Ds18b20_ManualConvert+0xdc>)
 800067c:	1899      	adds	r1, r3, r2
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	3308      	adds	r3, #8
 8000684:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <Ds18b20_ManualConvert+0xdc>)
 8000686:	4413      	add	r3, r2
 8000688:	79fc      	ldrb	r4, [r7, #7]
 800068a:	461a      	mov	r2, r3
 800068c:	4819      	ldr	r0, [pc, #100]	@ (80006f4 <Ds18b20_ManualConvert+0xd8>)
 800068e:	f000 f84b 	bl	8000728 <DS18B20_Read>
 8000692:	4603      	mov	r3, r0
 8000694:	4619      	mov	r1, r3
 8000696:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <Ds18b20_ManualConvert+0xdc>)
 8000698:	0123      	lsls	r3, r4, #4
 800069a:	4413      	add	r3, r2
 800069c:	330c      	adds	r3, #12
 800069e:	460a      	mov	r2, r1
 80006a0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	3301      	adds	r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <Ds18b20_ManualConvert+0xe0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	79fa      	ldrb	r2, [r7, #7]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3de      	bcc.n	8000670 <Ds18b20_ManualConvert+0x54>
 80006b2:	e011      	b.n	80006d8 <Ds18b20_ManualConvert+0xbc>
		}
	}
	else
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	71bb      	strb	r3, [r7, #6]
 80006b8:	e009      	b.n	80006ce <Ds18b20_ManualConvert+0xb2>
			ds18b20[i].DataIsValid = false;
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <Ds18b20_ManualConvert+0xdc>)
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	4413      	add	r3, r2
 80006c2:	330c      	adds	r3, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	3301      	adds	r3, #1
 80006cc:	71bb      	strb	r3, [r7, #6]
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <Ds18b20_ManualConvert+0xe0>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d3f0      	bcc.n	80006ba <Ds18b20_ManualConvert+0x9e>
	}
	if(Ds18b20Timeout==0)
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <Ds18b20_ManualConvert+0xd4>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <Ds18b20_ManualConvert+0xc8>
		return false;
 80006e0:	2300      	movs	r3, #0
 80006e2:	e000      	b.n	80006e6 <Ds18b20_ManualConvert+0xca>
	else
		return true;
 80006e4:	2301      	movs	r3, #1
	#endif
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd90      	pop	{r4, r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000004e 	.word	0x2000004e
 80006f4:	20000038 	.word	0x20000038
 80006f8:	20000028 	.word	0x20000028
 80006fc:	2000004d 	.word	0x2000004d

08000700 <DS18B20_StartAll>:
	
	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 fa95 	bl	8000c38 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 800070e:	21cc      	movs	r1, #204	@ 0xcc
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 fb17 	bl	8000d44 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8000716:	2144      	movs	r1, #68	@ 0x44
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 fb13 	bl	8000d44 <OneWire_WriteByte>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b08b      	sub	sp, #44	@ 0x2c
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 800073e:	68b8      	ldr	r0, [r7, #8]
 8000740:	f000 f96c 	bl	8000a1c <DS18B20_Is>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d101      	bne.n	800074e <DS18B20_Read+0x26>
		return false;
 800074a:	2300      	movs	r3, #0
 800074c:	e0d8      	b.n	8000900 <DS18B20_Read+0x1d8>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f000 face 	bl	8000cf0 <OneWire_ReadBit>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 800075a:	2300      	movs	r3, #0
 800075c:	e0d0      	b.n	8000900 <DS18B20_Read+0x1d8>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f000 fa6a 	bl	8000c38 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f000 fc20 	bl	8000fac <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800076c:	21be      	movs	r1, #190	@ 0xbe
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f000 fae8 	bl	8000d44 <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 8000774:	2300      	movs	r3, #0
 8000776:	77fb      	strb	r3, [r7, #31]
 8000778:	e00d      	b.n	8000796 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 800077a:	7ffc      	ldrb	r4, [r7, #31]
 800077c:	68f8      	ldr	r0, [r7, #12]
 800077e:	f000 faff 	bl	8000d80 <OneWire_ReadByte>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800078a:	443b      	add	r3, r7
 800078c:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 8000790:	7ffb      	ldrb	r3, [r7, #31]
 8000792:	3301      	adds	r3, #1
 8000794:	77fb      	strb	r3, [r7, #31]
 8000796:	7ffb      	ldrb	r3, [r7, #31]
 8000798:	2b08      	cmp	r3, #8
 800079a:	d9ee      	bls.n	800077a <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2108      	movs	r1, #8
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fc3d 	bl	8001022 <OneWire_CRC8>
 80007a8:	4603      	mov	r3, r0
 80007aa:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 80007ac:	7f3b      	ldrb	r3, [r7, #28]
 80007ae:	7fba      	ldrb	r2, [r7, #30]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d001      	beq.n	80007b8 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	e0a3      	b.n	8000900 <DS18B20_Read+0x1d8>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80007b8:	7d3b      	ldrb	r3, [r7, #20]
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	7d7b      	ldrb	r3, [r7, #21]
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 80007c8:	68f8      	ldr	r0, [r7, #12]
 80007ca:	f000 fa35 	bl	8000c38 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 80007ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da05      	bge.n	80007e2 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 80007d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007d8:	425b      	negs	r3, r3
 80007da:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 80007e2:	7e3b      	ldrb	r3, [r7, #24]
 80007e4:	115b      	asrs	r3, r3, #5
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	3309      	adds	r3, #9
 80007f0:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 80007f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007f4:	091b      	lsrs	r3, r3, #4
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 80007fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	b25b      	sxtb	r3, r3
 8000806:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800080a:	b25a      	sxtb	r2, r3
 800080c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000810:	4313      	orrs	r3, r2
 8000812:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 8000816:	7f7b      	ldrb	r3, [r7, #29]
 8000818:	3b09      	subs	r3, #9
 800081a:	2b03      	cmp	r3, #3
 800081c:	d850      	bhi.n	80008c0 <DS18B20_Read+0x198>
 800081e:	a201      	add	r2, pc, #4	@ (adr r2, 8000824 <DS18B20_Read+0xfc>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	08000835 	.word	0x08000835
 8000828:	08000859 	.word	0x08000859
 800082c:	0800087d 	.word	0x0800087d
 8000830:	080008a1 	.word	0x080008a1
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8000834:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000836:	08db      	lsrs	r3, r3, #3
 8000838:	b29b      	uxth	r3, r3
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fdf2 	bl	8000428 <__aeabi_i2f>
 8000844:	4603      	mov	r3, r0
 8000846:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8000848:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800084c:	6a38      	ldr	r0, [r7, #32]
 800084e:	f7ff fc7d 	bl	800014c <__aeabi_fmul>
 8000852:	4603      	mov	r3, r0
 8000854:	623b      	str	r3, [r7, #32]
		break;
 8000856:	e038      	b.n	80008ca <DS18B20_Read+0x1a2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8000858:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	b29b      	uxth	r3, r3
 800085e:	f003 0303 	and.w	r3, r3, #3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fde0 	bl	8000428 <__aeabi_i2f>
 8000868:	4603      	mov	r3, r0
 800086a:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 800086c:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8000870:	6a38      	ldr	r0, [r7, #32]
 8000872:	f7ff fc6b 	bl	800014c <__aeabi_fmul>
 8000876:	4603      	mov	r3, r0
 8000878:	623b      	str	r3, [r7, #32]
		 break;
 800087a:	e026      	b.n	80008ca <DS18B20_Read+0x1a2>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 800087c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800087e:	085b      	lsrs	r3, r3, #1
 8000880:	b29b      	uxth	r3, r3
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fdce 	bl	8000428 <__aeabi_i2f>
 800088c:	4603      	mov	r3, r0
 800088e:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8000890:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8000894:	6a38      	ldr	r0, [r7, #32]
 8000896:	f7ff fc59 	bl	800014c <__aeabi_fmul>
 800089a:	4603      	mov	r3, r0
 800089c:	623b      	str	r3, [r7, #32]
		break;
 800089e:	e014      	b.n	80008ca <DS18B20_Read+0x1a2>
		case 12: 
			decimal = temperature & 0x0F;
 80008a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fdbe 	bl	8000428 <__aeabi_i2f>
 80008ac:	4603      	mov	r3, r0
 80008ae:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80008b0:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80008b4:	6a38      	ldr	r0, [r7, #32]
 80008b6:	f7ff fc49 	bl	800014c <__aeabi_fmul>
 80008ba:	4603      	mov	r3, r0
 80008bc:	623b      	str	r3, [r7, #32]
		 break;
 80008be:	e004      	b.n	80008ca <DS18B20_Read+0x1a2>
		default: 
			decimal = 0xFF;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <DS18B20_Read+0x1e0>)
 80008c2:	623b      	str	r3, [r7, #32]
			digit = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 80008ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fdaa 	bl	8000428 <__aeabi_i2f>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4619      	mov	r1, r3
 80008d8:	6a38      	ldr	r0, [r7, #32]
 80008da:	f7ff fcf1 	bl	80002c0 <__addsf3>
 80008de:	4603      	mov	r3, r0
 80008e0:	623b      	str	r3, [r7, #32]
	if (minus) 
 80008e2:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <DS18B20_Read+0x1d0>
		decimal = 0 - decimal;
 80008ea:	6a39      	ldr	r1, [r7, #32]
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	f7ff fce4 	bl	80002bc <__aeabi_fsub>
 80008f4:	4603      	mov	r3, r0
 80008f6:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a3a      	ldr	r2, [r7, #32]
 80008fc:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	372c      	adds	r7, #44	@ 0x2c
 8000904:	46bd      	mov	sp, r7
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	437f0000 	.word	0x437f0000

0800090c <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	4613      	mov	r3, r2
 8000918:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 800091a:	68b8      	ldr	r0, [r7, #8]
 800091c:	f000 f87e 	bl	8000a1c <DS18B20_Is>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <DS18B20_SetResolution+0x1e>
		return 0;
 8000926:	2300      	movs	r3, #0
 8000928:	e074      	b.n	8000a14 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f000 f984 	bl	8000c38 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f000 fb3a 	bl	8000fac <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000938:	21be      	movs	r1, #190	@ 0xbe
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f000 fa02 	bl	8000d44 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f000 fa1d 	bl	8000d80 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f000 fa1a 	bl	8000d80 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f000 fa17 	bl	8000d80 <OneWire_ReadByte>
 8000952:	4603      	mov	r3, r0
 8000954:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f000 fa12 	bl	8000d80 <OneWire_ReadByte>
 800095c:	4603      	mov	r3, r0
 800095e:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f000 fa0d 	bl	8000d80 <OneWire_ReadByte>
 8000966:	4603      	mov	r3, r0
 8000968:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b09      	cmp	r3, #9
 800096e:	d108      	bne.n	8000982 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000976:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000978:	7dfb      	ldrb	r3, [r7, #23]
 800097a:	f023 0320 	bic.w	r3, r3, #32
 800097e:	75fb      	strb	r3, [r7, #23]
 8000980:	e022      	b.n	80009c8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b0a      	cmp	r3, #10
 8000986:	d108      	bne.n	800099a <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800098e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	f043 0320 	orr.w	r3, r3, #32
 8000996:	75fb      	strb	r3, [r7, #23]
 8000998:	e016      	b.n	80009c8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b0b      	cmp	r3, #11
 800099e:	d108      	bne.n	80009b2 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80009a0:	7dfb      	ldrb	r3, [r7, #23]
 80009a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a6:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80009a8:	7dfb      	ldrb	r3, [r7, #23]
 80009aa:	f023 0320 	bic.w	r3, r3, #32
 80009ae:	75fb      	strb	r3, [r7, #23]
 80009b0:	e00a      	b.n	80009c8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b0c      	cmp	r3, #12
 80009b6:	d107      	bne.n	80009c8 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009be:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	f043 0320 	orr.w	r3, r3, #32
 80009c6:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f000 f935 	bl	8000c38 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80009ce:	68b9      	ldr	r1, [r7, #8]
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f000 faeb 	bl	8000fac <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80009d6:	214e      	movs	r1, #78	@ 0x4e
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f000 f9b3 	bl	8000d44 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80009de:	7dbb      	ldrb	r3, [r7, #22]
 80009e0:	4619      	mov	r1, r3
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f000 f9ae 	bl	8000d44 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80009e8:	7d7b      	ldrb	r3, [r7, #21]
 80009ea:	4619      	mov	r1, r3
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f000 f9a9 	bl	8000d44 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	4619      	mov	r1, r3
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f000 f9a4 	bl	8000d44 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 f91b 	bl	8000c38 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a02:	68b9      	ldr	r1, [r7, #8]
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f000 fad1 	bl	8000fac <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000a0a:	2148      	movs	r1, #72	@ 0x48
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f000 f999 	bl	8000d44 <OneWire_WriteByte>
	
	return 1;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b28      	cmp	r3, #40	@ 0x28
 8000a2a:	d101      	bne.n	8000a30 <DS18B20_Is+0x14>
		return 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e000      	b.n	8000a32 <DS18B20_Is+0x16>
	
	return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8000a46:	6838      	ldr	r0, [r7, #0]
 8000a48:	f7ff ffe8 	bl	8000a1c <DS18B20_Is>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e049      	b.n	8000aea <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f8ee 	bl	8000c38 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a5c:	6839      	ldr	r1, [r7, #0]
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 faa4 	bl	8000fac <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000a64:	21be      	movs	r1, #190	@ 0xbe
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f000 f96c 	bl	8000d44 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 f987 	bl	8000d80 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f984 	bl	8000d80 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f981 	bl	8000d80 <OneWire_ReadByte>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f97c 	bl	8000d80 <OneWire_ReadByte>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 f977 	bl	8000d80 <OneWire_ReadByte>
 8000a92:	4603      	mov	r3, r0
 8000a94:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8000a96:	237d      	movs	r3, #125	@ 0x7d
 8000a98:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8000a9a:	23c9      	movs	r3, #201	@ 0xc9
 8000a9c:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f8ca 	bl	8000c38 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000aa4:	6839      	ldr	r1, [r7, #0]
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 fa80 	bl	8000fac <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000aac:	214e      	movs	r1, #78	@ 0x4e
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f948 	bl	8000d44 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 f943 	bl	8000d44 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 f93e 	bl	8000d44 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000ac8:	7b7b      	ldrb	r3, [r7, #13]
 8000aca:	4619      	mov	r1, r3
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 f939 	bl	8000d44 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f8b0 	bl	8000c38 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000ad8:	6839      	ldr	r1, [r7, #0]
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 fa66 	bl	8000fac <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000ae0:	2148      	movs	r1, #72	@ 0x48
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f92e 	bl	8000d44 <OneWire_WriteByte>
	
	return 1;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 f8f8 	bl	8000cf0 <OneWire_ReadBit>
 8000b00:	4603      	mov	r3, r0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <ONEWIRE_DELAY>:
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"

void ONEWIRE_DELAY(uint16_t time_us)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <ONEWIRE_DELAY+0x2c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000b1e:	bf00      	nop
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <ONEWIRE_DELAY+0x2c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d9f9      	bls.n	8000b20 <ONEWIRE_DELAY+0x14>
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	200000c8 	.word	0x200000c8

08000b3c <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	889b      	ldrh	r3, [r3, #4]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	0412      	lsls	r2, r2, #16
 8000b50:	611a      	str	r2, [r3, #16]
}	
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	889a      	ldrh	r2, [r3, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	611a      	str	r2, [r3, #16]
}	
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	889b      	ldrh	r3, [r3, #4]
 8000b90:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f107 0208 	add.w	r2, r7, #8
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 f8a3 	bl	8001ce8 <HAL_GPIO_Init>
}	
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb2:	2311      	movs	r3, #17
 8000bb4:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	889b      	ldrh	r3, [r3, #4]
 8000bc2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f107 0208 	add.w	r2, r7, #8
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 f88a 	bl	8001ce8 <HAL_GPIO_Init>

}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	4613      	mov	r3, r2
 8000be8:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8000bea:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <OneWire_Init+0x58>)
 8000bec:	f001 ff14 	bl	8002a18 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	88fa      	ldrh	r2, [r7, #6]
 8000bfa:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff ffd4 	bl	8000baa <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff ffaa 	bl	8000b5c <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8000c08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0c:	f000 ff3a 	bl	8001a84 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff ff93 	bl	8000b3c <ONEWIRE_LOW>
	OneWireDelay(1000);
 8000c16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c1a:	f000 ff33 	bl	8001a84 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f7ff ff9c 	bl	8000b5c <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8000c24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c28:	f000 ff2c 	bl	8001a84 <HAL_Delay>
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000c8 	.word	0x200000c8

08000c38 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff7b 	bl	8000b3c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffaf 	bl	8000baa <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8000c4c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000c50:	f7ff ff5c 	bl	8000b0c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8000c54:	2014      	movs	r0, #20
 8000c56:	f7ff ff59 	bl	8000b0c <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ff8c 	bl	8000b78 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8000c60:	2046      	movs	r0, #70	@ 0x46
 8000c62:	f7ff ff53 	bl	8000b0c <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	889b      	ldrh	r3, [r3, #4]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4610      	mov	r0, r2
 8000c72:	f001 f9bd 	bl	8001ff0 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
 8000c78:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8000c7a:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8000c7e:	f7ff ff45 	bl	8000b0c <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	70fb      	strb	r3, [r7, #3]
	if (bit) 
 8000c98:	78fb      	ldrb	r3, [r7, #3]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d012      	beq.n	8000cc4 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff4c 	bl	8000b3c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff80 	bl	8000baa <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8000caa:	200a      	movs	r0, #10
 8000cac:	f7ff ff2e 	bl	8000b0c <ONEWIRE_DELAY>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff61 	bl	8000b78 <ONEWIRE_INPUT>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8000cb6:	2037      	movs	r0, #55	@ 0x37
 8000cb8:	f7ff ff28 	bl	8000b0c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff5b 	bl	8000b78 <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8000cc2:	e011      	b.n	8000ce8 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff39 	bl	8000b3c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff6d 	bl	8000baa <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 8000cd0:	2041      	movs	r0, #65	@ 0x41
 8000cd2:	f7ff ff1b 	bl	8000b0c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ff4e 	bl	8000b78 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8000cdc:	2005      	movs	r0, #5
 8000cde:	f7ff ff15 	bl	8000b0c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ff48 	bl	8000b78 <ONEWIRE_INPUT>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff1d 	bl	8000b3c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff51 	bl	8000baa <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f7ff feff 	bl	8000b0c <ONEWIRE_DELAY>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ff32 	bl	8000b78 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 8000d14:	200a      	movs	r0, #10
 8000d16:	f7ff fef9 	bl	8000b0c <ONEWIRE_DELAY>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	889b      	ldrh	r3, [r3, #4]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4610      	mov	r0, r2
 8000d26:	f001 f963 	bl	8001ff0 <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8000d34:	2032      	movs	r0, #50	@ 0x32
 8000d36:	f7ff fee9 	bl	8000b0c <ONEWIRE_DELAY>
	
	/* Return bit value */
	return bit;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8000d50:	2308      	movs	r3, #8
 8000d52:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8000d54:	e00a      	b.n	8000d6c <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4619      	mov	r1, r3
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff93 	bl	8000c8c <OneWire_WriteBit>
		byte >>= 1;
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	085b      	lsrs	r3, r3, #1
 8000d6a:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	1e5a      	subs	r2, r3, #1
 8000d70:	73fa      	strb	r2, [r7, #15]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1ef      	bne.n	8000d56 <OneWire_WriteByte+0x12>
	}
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8000d90:	e00d      	b.n	8000dae <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	085b      	lsrs	r3, r3, #1
 8000d96:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffa9 	bl	8000cf0 <OneWire_ReadBit>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	01db      	lsls	r3, r3, #7
 8000da2:	b25a      	sxtb	r2, r3
 8000da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	1e5a      	subs	r2, r3, #1
 8000db2:	73fa      	strb	r2, [r7, #15]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1ec      	bne.n	8000d92 <OneWire_ReadByte+0x12>
	}
	
	return byte;
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f816 	bl	8000dfc <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8000dd0:	21f0      	movs	r1, #240	@ 0xf0
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 f824 	bl	8000e20 <OneWire_Search>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8000dea:	21f0      	movs	r1, #240	@ 0xf0
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 f817 	bl	8000e20 <OneWire_Search>
 8000df2:	4603      	mov	r3, r0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	71da      	strb	r2, [r3, #7]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7a1b      	ldrb	r3, [r3, #8]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f040 809a 	bne.w	8000f7e <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fef4 	bl	8000c38 <OneWire_Reset>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00a      	beq.n	8000e6c <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	71da      	strb	r2, [r3, #7]
			return 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e09b      	b.n	8000fa4 <OneWire_Search+0x184>
		}

		// issue the search command 
		OneWire_WriteByte(OneWireStruct, command);  
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff67 	bl	8000d44 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff3a 	bl	8000cf0 <OneWire_ReadBit>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff35 	bl	8000cf0 <OneWire_ReadBit>
 8000e86:	4603      	mov	r3, r0
 8000e88:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8000e8a:	7a7b      	ldrb	r3, [r7, #9]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d102      	bne.n	8000e96 <OneWire_Search+0x76>
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d064      	beq.n	8000f60 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8000e96:	7a7a      	ldrb	r2, [r7, #9]
 8000e98:	7a3b      	ldrb	r3, [r7, #8]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d002      	beq.n	8000ea4 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8000e9e:	7a7b      	ldrb	r3, [r7, #9]
 8000ea0:	72bb      	strb	r3, [r7, #10]
 8000ea2:	e026      	b.n	8000ef2 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d20d      	bcs.n	8000eca <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8000eae:	7b7b      	ldrb	r3, [r7, #13]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	7a5a      	ldrb	r2, [r3, #9]
 8000eb6:	7afb      	ldrb	r3, [r7, #11]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf14      	ite	ne
 8000ec0:	2301      	movne	r3, #1
 8000ec2:	2300      	moveq	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	72bb      	strb	r3, [r7, #10]
 8000ec8:	e008      	b.n	8000edc <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	799b      	ldrb	r3, [r3, #6]
 8000ece:	7bfa      	ldrb	r2, [r7, #15]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	bf0c      	ite	eq
 8000ed4:	2301      	moveq	r3, #1
 8000ed6:	2300      	movne	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	72bb      	strb	r3, [r7, #10]
					}
					
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8000edc:	7abb      	ldrb	r3, [r7, #10]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d107      	bne.n	8000ef2 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d802      	bhi.n	8000ef2 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7bba      	ldrb	r2, [r7, #14]
 8000ef0:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8000ef2:	7abb      	ldrb	r3, [r7, #10]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10c      	bne.n	8000f12 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8000ef8:	7b7b      	ldrb	r3, [r7, #13]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	7a59      	ldrb	r1, [r3, #9]
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
 8000f02:	7afa      	ldrb	r2, [r7, #11]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	b2d1      	uxtb	r1, r2
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	725a      	strb	r2, [r3, #9]
 8000f10:	e010      	b.n	8000f34 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8000f12:	7b7b      	ldrb	r3, [r7, #13]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	7a5b      	ldrb	r3, [r3, #9]
 8000f1a:	b25a      	sxtb	r2, r3
 8000f1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	4013      	ands	r3, r2
 8000f26:	b25a      	sxtb	r2, r3
 8000f28:	7b7b      	ldrb	r3, [r7, #13]
 8000f2a:	b2d1      	uxtb	r1, r2
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	460a      	mov	r2, r1
 8000f32:	725a      	strb	r2, [r3, #9]
				}
				
				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8000f34:	7abb      	ldrb	r3, [r7, #10]
 8000f36:	4619      	mov	r1, r3
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fea7 	bl	8000c8c <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3301      	adds	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8000f44:	7afb      	ldrb	r3, [r7, #11]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8000f4a:	7afb      	ldrb	r3, [r7, #11]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d104      	bne.n	8000f5a <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8000f50:	7b7b      	ldrb	r3, [r7, #13]
 8000f52:	3301      	adds	r3, #1
 8000f54:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8000f5a:	7b7b      	ldrb	r3, [r7, #13]
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	d98a      	bls.n	8000e76 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b40      	cmp	r3, #64	@ 0x40
 8000f64:	d90b      	bls.n	8000f7e <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7bba      	ldrb	r2, [r7, #14]
 8000f6a:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	799b      	ldrb	r3, [r3, #6]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8000f7e:	7b3b      	ldrb	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <OneWire_Search+0x16c>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7a5b      	ldrb	r3, [r3, #9]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10a      	bne.n	8000fa2 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8000fa2:	7b3b      	ldrb	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8000fb6:	2155      	movs	r1, #85	@ 0x55
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fec3 	bl	8000d44 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e00a      	b.n	8000fda <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff feb8 	bl	8000d44 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	d9f1      	bls.n	8000fc4 <OneWire_SelectWithPointer+0x18>
	}	
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8000fea:	b480      	push	{r7}
 8000fec:	b085      	sub	sp, #20
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e00a      	b.n	8001010 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	440b      	add	r3, r1
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	440a      	add	r2, r1
 8001006:	7a52      	ldrb	r2, [r2, #9]
 8001008:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	3301      	adds	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b07      	cmp	r3, #7
 8001014:	d9f1      	bls.n	8000ffa <OneWire_GetFullROM+0x10>
	}
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 8001032:	e022      	b.n	800107a <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800103e:	2308      	movs	r3, #8
 8001040:	737b      	strb	r3, [r7, #13]
 8001042:	e017      	b.n	8001074 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	4053      	eors	r3, r2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	085b      	lsrs	r3, r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8001058:	7b3b      	ldrb	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001064:	43db      	mvns	r3, r3
 8001066:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	085b      	lsrs	r3, r3, #1
 800106c:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	3b01      	subs	r3, #1
 8001072:	737b      	strb	r3, [r7, #13]
 8001074:	7b7b      	ldrb	r3, [r7, #13]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1e4      	bne.n	8001044 <OneWire_CRC8+0x22>
	while (len--) {
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	70fa      	strb	r2, [r7, #3]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1d7      	bne.n	8001034 <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <init_fnd>:
#define false 0
#define true 1

uint8_t _LED_0F[29];

void init_fnd(){
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	  _LED_0F[0] = 0xC0; //0
 8001094:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <init_fnd+0xbc>)
 8001096:	22c0      	movs	r2, #192	@ 0xc0
 8001098:	701a      	strb	r2, [r3, #0]
	  _LED_0F[1] = 0xF9; //1
 800109a:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <init_fnd+0xbc>)
 800109c:	22f9      	movs	r2, #249	@ 0xf9
 800109e:	705a      	strb	r2, [r3, #1]
	  _LED_0F[2] = 0xA4; //2
 80010a0:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <init_fnd+0xbc>)
 80010a2:	22a4      	movs	r2, #164	@ 0xa4
 80010a4:	709a      	strb	r2, [r3, #2]
	  _LED_0F[3] = 0xB0; //3
 80010a6:	4b29      	ldr	r3, [pc, #164]	@ (800114c <init_fnd+0xbc>)
 80010a8:	22b0      	movs	r2, #176	@ 0xb0
 80010aa:	70da      	strb	r2, [r3, #3]
	  _LED_0F[4] = 0x99; //4
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <init_fnd+0xbc>)
 80010ae:	2299      	movs	r2, #153	@ 0x99
 80010b0:	711a      	strb	r2, [r3, #4]
	  _LED_0F[5] = 0x92; //5
 80010b2:	4b26      	ldr	r3, [pc, #152]	@ (800114c <init_fnd+0xbc>)
 80010b4:	2292      	movs	r2, #146	@ 0x92
 80010b6:	715a      	strb	r2, [r3, #5]
	  _LED_0F[6] = 0x82; //6
 80010b8:	4b24      	ldr	r3, [pc, #144]	@ (800114c <init_fnd+0xbc>)
 80010ba:	2282      	movs	r2, #130	@ 0x82
 80010bc:	719a      	strb	r2, [r3, #6]
	  _LED_0F[7] = 0xF8; //7
 80010be:	4b23      	ldr	r3, [pc, #140]	@ (800114c <init_fnd+0xbc>)
 80010c0:	22f8      	movs	r2, #248	@ 0xf8
 80010c2:	71da      	strb	r2, [r3, #7]
	  _LED_0F[8] = 0x80; //8
 80010c4:	4b21      	ldr	r3, [pc, #132]	@ (800114c <init_fnd+0xbc>)
 80010c6:	2280      	movs	r2, #128	@ 0x80
 80010c8:	721a      	strb	r2, [r3, #8]
	  _LED_0F[9] = 0x90; //9
 80010ca:	4b20      	ldr	r3, [pc, #128]	@ (800114c <init_fnd+0xbc>)
 80010cc:	2290      	movs	r2, #144	@ 0x90
 80010ce:	725a      	strb	r2, [r3, #9]
	  _LED_0F[10] = 0x88; //A
 80010d0:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <init_fnd+0xbc>)
 80010d2:	2288      	movs	r2, #136	@ 0x88
 80010d4:	729a      	strb	r2, [r3, #10]
	  _LED_0F[11] = 0x83; //b
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <init_fnd+0xbc>)
 80010d8:	2283      	movs	r2, #131	@ 0x83
 80010da:	72da      	strb	r2, [r3, #11]
	  _LED_0F[12] = 0xC6; //C
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <init_fnd+0xbc>)
 80010de:	22c6      	movs	r2, #198	@ 0xc6
 80010e0:	731a      	strb	r2, [r3, #12]
	  _LED_0F[13] = 0xA1; //d
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <init_fnd+0xbc>)
 80010e4:	22a1      	movs	r2, #161	@ 0xa1
 80010e6:	735a      	strb	r2, [r3, #13]
	  _LED_0F[14] = 0x86; //E
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <init_fnd+0xbc>)
 80010ea:	2286      	movs	r2, #134	@ 0x86
 80010ec:	739a      	strb	r2, [r3, #14]
	  _LED_0F[15] = 0x8E; //F
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <init_fnd+0xbc>)
 80010f0:	228e      	movs	r2, #142	@ 0x8e
 80010f2:	73da      	strb	r2, [r3, #15]
	  _LED_0F[16] = 0xC2; //G
 80010f4:	4b15      	ldr	r3, [pc, #84]	@ (800114c <init_fnd+0xbc>)
 80010f6:	22c2      	movs	r2, #194	@ 0xc2
 80010f8:	741a      	strb	r2, [r3, #16]
	  _LED_0F[17] = 0x89; //H
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <init_fnd+0xbc>)
 80010fc:	2289      	movs	r2, #137	@ 0x89
 80010fe:	745a      	strb	r2, [r3, #17]
	  _LED_0F[18] = 0xF9; //I
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <init_fnd+0xbc>)
 8001102:	22f9      	movs	r2, #249	@ 0xf9
 8001104:	749a      	strb	r2, [r3, #18]
	  _LED_0F[19] = 0xF1; //J
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <init_fnd+0xbc>)
 8001108:	22f1      	movs	r2, #241	@ 0xf1
 800110a:	74da      	strb	r2, [r3, #19]
	  _LED_0F[20] = 0xC3; //L
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <init_fnd+0xbc>)
 800110e:	22c3      	movs	r2, #195	@ 0xc3
 8001110:	751a      	strb	r2, [r3, #20]
	  _LED_0F[21] = 0xA9; //n
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <init_fnd+0xbc>)
 8001114:	22a9      	movs	r2, #169	@ 0xa9
 8001116:	755a      	strb	r2, [r3, #21]
	  _LED_0F[22] = 0xC0; //O
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <init_fnd+0xbc>)
 800111a:	22c0      	movs	r2, #192	@ 0xc0
 800111c:	759a      	strb	r2, [r3, #22]
	  _LED_0F[23] = 0x8C; //P
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <init_fnd+0xbc>)
 8001120:	228c      	movs	r2, #140	@ 0x8c
 8001122:	75da      	strb	r2, [r3, #23]
	  _LED_0F[24] = 0x98; //q
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <init_fnd+0xbc>)
 8001126:	2298      	movs	r2, #152	@ 0x98
 8001128:	761a      	strb	r2, [r3, #24]
	  _LED_0F[25] = 0x92; //S
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <init_fnd+0xbc>)
 800112c:	2292      	movs	r2, #146	@ 0x92
 800112e:	765a      	strb	r2, [r3, #25]
	  _LED_0F[26] = 0xC1; //U
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <init_fnd+0xbc>)
 8001132:	22c1      	movs	r2, #193	@ 0xc1
 8001134:	769a      	strb	r2, [r3, #26]
	  _LED_0F[27] = 0x91; //Y
 8001136:	4b05      	ldr	r3, [pc, #20]	@ (800114c <init_fnd+0xbc>)
 8001138:	2291      	movs	r2, #145	@ 0x91
 800113a:	76da      	strb	r2, [r3, #27]
	  _LED_0F[28] = 0xFE; //hight -
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <init_fnd+0xbc>)
 800113e:	22fe      	movs	r2, #254	@ 0xfe
 8001140:	771a      	strb	r2, [r3, #28]
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000050 	.word	0x20000050

08001150 <send>:

void send(uint8_t X){
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  for (int i = 8; i >= 1; i--)
 800115a:	2308      	movs	r3, #8
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e022      	b.n	80011a6 <send+0x56>
  {
	if (X & 0x80)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	da06      	bge.n	8001176 <send+0x26>
	{
		HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116e:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <send+0x68>)
 8001170:	f000 ff55 	bl	800201e <HAL_GPIO_WritePin>
 8001174:	e005      	b.n	8001182 <send+0x32>
	}
	else
	{
		HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800117c:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <send+0x68>)
 800117e:	f000 ff4e 	bl	800201e <HAL_GPIO_WritePin>
	}
	X <<= 1;
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(FND_SCLK_GPIO_Port,FND_SCLK_Pin,HIGH);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800118e:	480a      	ldr	r0, [pc, #40]	@ (80011b8 <send+0x68>)
 8001190:	f000 ff45 	bl	800201e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_SCLK_GPIO_Port,FND_SCLK_Pin,LOW);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800119a:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <send+0x68>)
 800119c:	f000 ff3f 	bl	800201e <HAL_GPIO_WritePin>
  for (int i = 8; i >= 1; i--)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dcd9      	bgt.n	8001160 <send+0x10>
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40010c00 	.word	0x40010c00

080011bc <send_port>:

void send_port(uint8_t X, uint8_t port)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	460a      	mov	r2, r1
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71bb      	strb	r3, [r7, #6]
  send(X);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ffbe 	bl	8001150 <send>
  send(port);
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ffba 	bl	8001150 <send>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port,FND_RCLK_Pin,LOW);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011e2:	4806      	ldr	r0, [pc, #24]	@ (80011fc <send_port+0x40>)
 80011e4:	f000 ff1b 	bl	800201e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port,FND_RCLK_Pin,HIGH);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ee:	4803      	ldr	r0, [pc, #12]	@ (80011fc <send_port+0x40>)
 80011f0:	f000 ff15 	bl	800201e <HAL_GPIO_WritePin>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40010c00 	.word	0x40010c00

08001200 <digit4_temperature>:
  if(showZero | n>999)send_port(_LED_0F[n4], 0b1000);

}

void digit4_temperature(int n,uint8_t showZero,int replay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	460b      	mov	r3, r1
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	72fb      	strb	r3, [r7, #11]
  int n1, n2, n3, n4;
  n1 = (int)  n % 10;
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4b4a      	ldr	r3, [pc, #296]	@ (800133c <digit4_temperature+0x13c>)
 8001212:	fb83 1302 	smull	r1, r3, r3, r2
 8001216:	1099      	asrs	r1, r3, #2
 8001218:	17d3      	asrs	r3, r2, #31
 800121a:	1ac9      	subs	r1, r1, r3
 800121c:	460b      	mov	r3, r1
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	623b      	str	r3, [r7, #32]
  n2 = (int) (n % 100)/10;
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4b45      	ldr	r3, [pc, #276]	@ (8001340 <digit4_temperature+0x140>)
 800122c:	fb83 1302 	smull	r1, r3, r3, r2
 8001230:	1159      	asrs	r1, r3, #5
 8001232:	17d3      	asrs	r3, r2, #31
 8001234:	1acb      	subs	r3, r1, r3
 8001236:	2164      	movs	r1, #100	@ 0x64
 8001238:	fb01 f303 	mul.w	r3, r1, r3
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	4a3f      	ldr	r2, [pc, #252]	@ (800133c <digit4_temperature+0x13c>)
 8001240:	fb82 1203 	smull	r1, r2, r2, r3
 8001244:	1092      	asrs	r2, r2, #2
 8001246:	17db      	asrs	r3, r3, #31
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	61fb      	str	r3, [r7, #28]
  n3 = (int) (n % 1000)/100;
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4b3d      	ldr	r3, [pc, #244]	@ (8001344 <digit4_temperature+0x144>)
 8001250:	fb83 1302 	smull	r1, r3, r3, r2
 8001254:	1199      	asrs	r1, r3, #6
 8001256:	17d3      	asrs	r3, r2, #31
 8001258:	1acb      	subs	r3, r1, r3
 800125a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800125e:	fb01 f303 	mul.w	r3, r1, r3
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	4a36      	ldr	r2, [pc, #216]	@ (8001340 <digit4_temperature+0x140>)
 8001266:	fb82 1203 	smull	r1, r2, r2, r3
 800126a:	1152      	asrs	r2, r2, #5
 800126c:	17db      	asrs	r3, r3, #31
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	61bb      	str	r3, [r7, #24]
  n4 = (int) (n % 10000)/1000;
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4b34      	ldr	r3, [pc, #208]	@ (8001348 <digit4_temperature+0x148>)
 8001276:	fb83 1302 	smull	r1, r3, r3, r2
 800127a:	1319      	asrs	r1, r3, #12
 800127c:	17d3      	asrs	r3, r2, #31
 800127e:	1acb      	subs	r3, r1, r3
 8001280:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001284:	fb01 f303 	mul.w	r3, r1, r3
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	4a2e      	ldr	r2, [pc, #184]	@ (8001344 <digit4_temperature+0x144>)
 800128c:	fb82 1203 	smull	r1, r2, r2, r3
 8001290:	1192      	asrs	r2, r2, #6
 8001292:	17db      	asrs	r3, r3, #31
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]

  for(int i = 0; i<=replay; i++){
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
 800129c:	e045      	b.n	800132a <digit4_temperature+0x12a>
	  send_port(_LED_0F[n1], 0b0001);
 800129e:	4a2b      	ldr	r2, [pc, #172]	@ (800134c <digit4_temperature+0x14c>)
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2101      	movs	r1, #1
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff87 	bl	80011bc <send_port>
	  if(showZero | n>9)send_port(_LED_0F[n2] & 0x7F, 0b0010);
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	2a09      	cmp	r2, #9
 80012b4:	bfcc      	ite	gt
 80012b6:	2201      	movgt	r2, #1
 80012b8:	2200      	movle	r2, #0
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	4313      	orrs	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00a      	beq.n	80012d8 <digit4_temperature+0xd8>
 80012c2:	4a22      	ldr	r2, [pc, #136]	@ (800134c <digit4_temperature+0x14c>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2102      	movs	r1, #2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff72 	bl	80011bc <send_port>
	  if(showZero | n>99)send_port(_LED_0F[n3], 0b0100);
 80012d8:	7afb      	ldrb	r3, [r7, #11]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	2a63      	cmp	r2, #99	@ 0x63
 80012de:	bfcc      	ite	gt
 80012e0:	2201      	movgt	r2, #1
 80012e2:	2200      	movle	r2, #0
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	4313      	orrs	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <digit4_temperature+0xfc>
 80012ec:	4a17      	ldr	r2, [pc, #92]	@ (800134c <digit4_temperature+0x14c>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2104      	movs	r1, #4
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff60 	bl	80011bc <send_port>
	  if(showZero | n>999)send_port(_LED_0F[n4], 0b1000);
 80012fc:	7afb      	ldrb	r3, [r7, #11]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8001304:	428a      	cmp	r2, r1
 8001306:	bfcc      	ite	gt
 8001308:	2201      	movgt	r2, #1
 800130a:	2200      	movle	r2, #0
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	4313      	orrs	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d007      	beq.n	8001324 <digit4_temperature+0x124>
 8001314:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <digit4_temperature+0x14c>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2108      	movs	r1, #8
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff4c 	bl	80011bc <send_port>
  for(int i = 0; i<=replay; i++){
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	3301      	adds	r3, #1
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
 800132a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	ddb5      	ble.n	800129e <digit4_temperature+0x9e>
  }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	66666667 	.word	0x66666667
 8001340:	51eb851f 	.word	0x51eb851f
 8001344:	10624dd3 	.word	0x10624dd3
 8001348:	68db8bad 	.word	0x68db8bad
 800134c:	20000050 	.word	0x20000050

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001356:	f000 fb33 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135a:	f000 f83b 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135e:	f000 f92b 	bl	80015b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001362:	f000 f87d 	bl	8001460 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001366:	f000 f8fd 	bl	8001564 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800136a:	f000 f8af 	bl	80014cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800136e:	4816      	ldr	r0, [pc, #88]	@ (80013c8 <main+0x78>)
 8001370:	f001 fb9c 	bl	8002aac <HAL_TIM_Base_Start_IT>
  init_fnd();
 8001374:	f7ff fe8c 	bl	8001090 <init_fnd>
  Ds18b20_Init();
 8001378:	f7ff f8d0 	bl	800051c <Ds18b20_Init>
	send_port(0x86,0b0001);
	send_port(0x8E,0b0010);
	send_port(0x88,0b0100);
	send_port(0xC6,0b1000);
	*/
	if(HAL_GPIO_ReadPin(PB0_TEMP_SET_UP_GPIO_Port, PB0_TEMP_SET_UP_Pin)){
 800137c:	2101      	movs	r1, #1
 800137e:	4813      	ldr	r0, [pc, #76]	@ (80013cc <main+0x7c>)
 8001380:	f000 fe36 	bl	8001ff0 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <main+0x46>
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 1);
 800138a:	2201      	movs	r2, #1
 800138c:	2140      	movs	r1, #64	@ 0x40
 800138e:	480f      	ldr	r0, [pc, #60]	@ (80013cc <main+0x7c>)
 8001390:	f000 fe45 	bl	800201e <HAL_GPIO_WritePin>
 8001394:	e004      	b.n	80013a0 <main+0x50>
	}
	else{
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2140      	movs	r1, #64	@ 0x40
 800139a:	480c      	ldr	r0, [pc, #48]	@ (80013cc <main+0x7c>)
 800139c:	f000 fe3f 	bl	800201e <HAL_GPIO_WritePin>
	}

	Ds18b20_ManualConvert();
 80013a0:	f7ff f93c 	bl	800061c <Ds18b20_ManualConvert>
	/*//
	for (int i = 0; i <= 9999; i++) {
		digit4_temperature(i,1);//send counter 0-9999 with delay 50 cicles and hide zero
	}
	//*/
	int temp = (int)ds18b20[0].Temperature;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <main+0x80>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f891 	bl	80004d0 <__aeabi_f2iz>
 80013ae:	4603      	mov	r3, r0
 80013b0:	607b      	str	r3, [r7, #4]
	digit4_temperature(temp * 10,1,1);
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2201      	movs	r2, #1
 80013be:	2101      	movs	r1, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff1d 	bl	8001200 <digit4_temperature>
  {
 80013c6:	e7d9      	b.n	800137c <main+0x2c>
 80013c8:	200000c8 	.word	0x200000c8
 80013cc:	40010c00 	.word	0x40010c00
 80013d0:	20000028 	.word	0x20000028

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b090      	sub	sp, #64	@ 0x40
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	2228      	movs	r2, #40	@ 0x28
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fff6 	bl	80033d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001404:	2301      	movs	r3, #1
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001408:	2302      	movs	r3, #2
 800140a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001410:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001412:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fe17 	bl	8002050 <HAL_RCC_OscConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001428:	f000 f970 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142c:	230f      	movs	r3, #15
 800142e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001430:	2302      	movs	r3, #2
 8001432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001438:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800143c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2102      	movs	r1, #2
 8001446:	4618      	mov	r0, r3
 8001448:	f001 f884 	bl	8002554 <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001452:	f000 f95b 	bl	800170c <Error_Handler>
  }
}
 8001456:	bf00      	nop
 8001458:	3740      	adds	r7, #64	@ 0x40
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <MX_SPI1_Init+0x64>)
 8001466:	4a18      	ldr	r2, [pc, #96]	@ (80014c8 <MX_SPI1_Init+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800146a:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <MX_SPI1_Init+0x64>)
 800146c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001470:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001472:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_SPI1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_SPI1_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_SPI1_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_SPI1_Init+0x64>)
 800148c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001490:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_SPI1_Init+0x64>)
 8001494:	2238      	movs	r2, #56	@ 0x38
 8001496:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <MX_SPI1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_SPI1_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <MX_SPI1_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_SPI1_Init+0x64>)
 80014ac:	220a      	movs	r2, #10
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <MX_SPI1_Init+0x64>)
 80014b2:	f001 f9dd 	bl	8002870 <HAL_SPI_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014bc:	f000 f926 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000070 	.word	0x20000070
 80014c8:	40013000 	.word	0x40013000

080014cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	463b      	mov	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <MX_TIM2_Init+0x94>)
 80014ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (72-1);
 80014f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001560 <MX_TIM2_Init+0x94>)
 80014f2:	2247      	movs	r2, #71	@ 0x47
 80014f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <MX_TIM2_Init+0x94>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 80014fc:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <MX_TIM2_Init+0x94>)
 80014fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001502:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_TIM2_Init+0x94>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <MX_TIM2_Init+0x94>)
 800150c:	2280      	movs	r2, #128	@ 0x80
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001510:	4813      	ldr	r0, [pc, #76]	@ (8001560 <MX_TIM2_Init+0x94>)
 8001512:	f001 fa31 	bl	8002978 <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800151c:	f000 f8f6 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001524:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4619      	mov	r1, r3
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <MX_TIM2_Init+0x94>)
 800152e:	f001 fc17 	bl	8002d60 <HAL_TIM_ConfigClockSource>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001538:	f000 f8e8 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_TIM2_Init+0x94>)
 800154a:	f001 fdf5 	bl	8003138 <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001554:	f000 f8da 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200000c8 	.word	0x200000c8

08001564 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_USART1_UART_Init+0x4c>)
 800156a:	4a12      	ldr	r2, [pc, #72]	@ (80015b4 <MX_USART1_UART_Init+0x50>)
 800156c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <MX_USART1_UART_Init+0x4c>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_USART1_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_USART1_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <MX_USART1_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_USART1_UART_Init+0x4c>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <MX_USART1_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_USART1_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_USART1_UART_Init+0x4c>)
 800159c:	f001 fe3c 	bl	8003218 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015a6:	f000 f8b1 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000110 	.word	0x20000110
 80015b4:	40013800 	.word	0x40013800

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	4b4b      	ldr	r3, [pc, #300]	@ (80016fc <MX_GPIO_Init+0x144>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a4a      	ldr	r2, [pc, #296]	@ (80016fc <MX_GPIO_Init+0x144>)
 80015d2:	f043 0310 	orr.w	r3, r3, #16
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b48      	ldr	r3, [pc, #288]	@ (80016fc <MX_GPIO_Init+0x144>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e4:	4b45      	ldr	r3, [pc, #276]	@ (80016fc <MX_GPIO_Init+0x144>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a44      	ldr	r2, [pc, #272]	@ (80016fc <MX_GPIO_Init+0x144>)
 80015ea:	f043 0320 	orr.w	r3, r3, #32
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b42      	ldr	r3, [pc, #264]	@ (80016fc <MX_GPIO_Init+0x144>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <MX_GPIO_Init+0x144>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a3e      	ldr	r2, [pc, #248]	@ (80016fc <MX_GPIO_Init+0x144>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b3c      	ldr	r3, [pc, #240]	@ (80016fc <MX_GPIO_Init+0x144>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b39      	ldr	r3, [pc, #228]	@ (80016fc <MX_GPIO_Init+0x144>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a38      	ldr	r2, [pc, #224]	@ (80016fc <MX_GPIO_Init+0x144>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b36      	ldr	r3, [pc, #216]	@ (80016fc <MX_GPIO_Init+0x144>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED0_GPIO_Port, GPIO_LED0_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001632:	4833      	ldr	r0, [pc, #204]	@ (8001700 <MX_GPIO_Init+0x148>)
 8001634:	f000 fcf3 	bl	800201e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA3_TEMP_DATA_GPIO_Port, PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2108      	movs	r1, #8
 800163c:	4831      	ldr	r0, [pc, #196]	@ (8001704 <MX_GPIO_Init+0x14c>)
 800163e:	f000 fcee 	bl	800201e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_SCLK_Pin|FND_RCLK_Pin|FND_DIO_Pin|PB6_LED1_Pin, GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	f24e 0140 	movw	r1, #57408	@ 0xe040
 8001648:	482f      	ldr	r0, [pc, #188]	@ (8001708 <MX_GPIO_Init+0x150>)
 800164a:	f000 fce8 	bl	800201e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED0_Pin */
  GPIO_InitStruct.Pin = GPIO_LED0_Pin;
 800164e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED0_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4619      	mov	r1, r3
 8001666:	4826      	ldr	r0, [pc, #152]	@ (8001700 <MX_GPIO_Init+0x148>)
 8001668:	f000 fb3e 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SWITCH_Pin */
  GPIO_InitStruct.Pin = GPIO_SWITCH_Pin;
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001674:	2301      	movs	r3, #1
 8001676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4619      	mov	r1, r3
 800167e:	4821      	ldr	r0, [pc, #132]	@ (8001704 <MX_GPIO_Init+0x14c>)
 8001680:	f000 fb32 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA3_TEMP_DATA_Pin;
 8001684:	2308      	movs	r3, #8
 8001686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2302      	movs	r3, #2
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA3_TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	481a      	ldr	r0, [pc, #104]	@ (8001704 <MX_GPIO_Init+0x14c>)
 800169c:	f000 fb24 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_TEMP_SET_UP_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin;
 80016a0:	2301      	movs	r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB0_TEMP_SET_UP_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	4815      	ldr	r0, [pc, #84]	@ (8001708 <MX_GPIO_Init+0x150>)
 80016b4:	f000 fb18 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_SCLK_Pin FND_RCLK_Pin FND_DIO_Pin */
  GPIO_InitStruct.Pin = FND_SCLK_Pin|FND_RCLK_Pin|FND_DIO_Pin;
 80016b8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4619      	mov	r1, r3
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_GPIO_Init+0x150>)
 80016d2:	f000 fb09 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6_LED1_Pin */
  GPIO_InitStruct.Pin = PB6_LED1_Pin;
 80016d6:	2340      	movs	r3, #64	@ 0x40
 80016d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016de:	2301      	movs	r3, #1
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB6_LED1_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	4806      	ldr	r0, [pc, #24]	@ (8001708 <MX_GPIO_Init+0x150>)
 80016ee:	f000 fafb 	bl	8001ce8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f2:	bf00      	nop
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	40011000 	.word	0x40011000
 8001704:	40010800 	.word	0x40010800
 8001708:	40010c00 	.word	0x40010c00

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <Error_Handler+0x8>

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <HAL_MspInit+0x5c>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a14      	ldr	r2, [pc, #80]	@ (8001774 <HAL_MspInit+0x5c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6193      	str	r3, [r2, #24]
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_MspInit+0x5c>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <HAL_MspInit+0x5c>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a0e      	ldr	r2, [pc, #56]	@ (8001774 <HAL_MspInit+0x5c>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <HAL_MspInit+0x5c>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800174e:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <HAL_MspInit+0x60>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <HAL_MspInit+0x60>)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000

0800177c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1b      	ldr	r2, [pc, #108]	@ (8001804 <HAL_SPI_MspInit+0x88>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d12f      	bne.n	80017fc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_SPI_MspInit+0x8c>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a19      	ldr	r2, [pc, #100]	@ (8001808 <HAL_SPI_MspInit+0x8c>)
 80017a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <HAL_SPI_MspInit+0x8c>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <HAL_SPI_MspInit+0x8c>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <HAL_SPI_MspInit+0x8c>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <HAL_SPI_MspInit+0x8c>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017cc:	23a0      	movs	r3, #160	@ 0xa0
 80017ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4619      	mov	r1, r3
 80017de:	480b      	ldr	r0, [pc, #44]	@ (800180c <HAL_SPI_MspInit+0x90>)
 80017e0:	f000 fa82 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017e4:	2340      	movs	r3, #64	@ 0x40
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <HAL_SPI_MspInit+0x90>)
 80017f8:	f000 fa76 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40013000 	.word	0x40013000
 8001808:	40021000 	.word	0x40021000
 800180c:	40010800 	.word	0x40010800

08001810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001820:	d113      	bne.n	800184a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <HAL_TIM_Base_MspInit+0x44>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	4a0b      	ldr	r2, [pc, #44]	@ (8001854 <HAL_TIM_Base_MspInit+0x44>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	61d3      	str	r3, [r2, #28]
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <HAL_TIM_Base_MspInit+0x44>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	201c      	movs	r0, #28
 8001840:	f000 fa1b 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001844:	201c      	movs	r0, #28
 8001846:	f000 fa34 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1c      	ldr	r2, [pc, #112]	@ (80018e4 <HAL_UART_MspInit+0x8c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d131      	bne.n	80018dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_UART_MspInit+0x90>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a1a      	ldr	r2, [pc, #104]	@ (80018e8 <HAL_UART_MspInit+0x90>)
 800187e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <HAL_UART_MspInit+0x90>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_UART_MspInit+0x90>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <HAL_UART_MspInit+0x90>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_UART_MspInit+0x90>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	4619      	mov	r1, r3
 80018bc:	480b      	ldr	r0, [pc, #44]	@ (80018ec <HAL_UART_MspInit+0x94>)
 80018be:	f000 fa13 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	4805      	ldr	r0, [pc, #20]	@ (80018ec <HAL_UART_MspInit+0x94>)
 80018d8:	f000 fa06 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40013800 	.word	0x40013800
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010800 	.word	0x40010800

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <NMI_Handler+0x4>

080018f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <MemManage_Handler+0x4>

08001908 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <UsageFault_Handler+0x4>

08001918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001940:	f000 f884 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  m_time++;
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <TIM2_IRQHandler+0x18>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a03      	ldr	r2, [pc, #12]	@ (8001960 <TIM2_IRQHandler+0x18>)
 8001954:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001956:	4803      	ldr	r0, [pc, #12]	@ (8001964 <TIM2_IRQHandler+0x1c>)
 8001958:	f001 f8fa 	bl	8002b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000158 	.word	0x20000158
 8001964:	200000c8 	.word	0x200000c8

08001968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001974:	f7ff fff8 	bl	8001968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001978:	480b      	ldr	r0, [pc, #44]	@ (80019a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800197a:	490c      	ldr	r1, [pc, #48]	@ (80019ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800197c:	4a0c      	ldr	r2, [pc, #48]	@ (80019b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a09      	ldr	r2, [pc, #36]	@ (80019b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001990:	4c09      	ldr	r4, [pc, #36]	@ (80019b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f001 fd21 	bl	80033e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019a2:	f7ff fcd5 	bl	8001350 <main>
  bx lr
 80019a6:	4770      	bx	lr
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019b0:	08003478 	.word	0x08003478
  ldr r2, =_sbss
 80019b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019b8:	20000160 	.word	0x20000160

080019bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC1_2_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <HAL_Init+0x28>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	@ (80019e8 <HAL_Init+0x28>)
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f947 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	200f      	movs	r0, #15
 80019d8:	f000 f808 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff fe9c 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f95f 	bl	8001cce <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f927 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	@ (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_IncTick+0x1c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_IncTick+0x20>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a03      	ldr	r2, [pc, #12]	@ (8001a6c <HAL_IncTick+0x20>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	2000015c 	.word	0x2000015c

08001a70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b02      	ldr	r3, [pc, #8]	@ (8001a80 <HAL_GetTick+0x10>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	2000015c 	.word	0x2000015c

08001a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_GetTick>
 8001a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d005      	beq.n	8001aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_Delay+0x44>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aaa:	bf00      	nop
 8001aac:	f7ff ffe0 	bl	8001a70 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8f7      	bhi.n	8001aac <HAL_Delay+0x28>
  {
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000008 	.word	0x20000008

08001acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4906      	ldr	r1, [pc, #24]	@ (8001b64 <__NVIC_EnableIRQ+0x34>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	@ (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	@ (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	@ 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	@ 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff90 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff2d 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff42 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff90 	bl	8001bbc <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5f 	bl	8001b68 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff35 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa2 	bl	8001c20 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b08b      	sub	sp, #44	@ 0x2c
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	e169      	b.n	8001fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8158 	bne.w	8001fca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4a9a      	ldr	r2, [pc, #616]	@ (8001f88 <HAL_GPIO_Init+0x2a0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d05e      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d24:	4a98      	ldr	r2, [pc, #608]	@ (8001f88 <HAL_GPIO_Init+0x2a0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d875      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d2a:	4a98      	ldr	r2, [pc, #608]	@ (8001f8c <HAL_GPIO_Init+0x2a4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d058      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d30:	4a96      	ldr	r2, [pc, #600]	@ (8001f8c <HAL_GPIO_Init+0x2a4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d86f      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d36:	4a96      	ldr	r2, [pc, #600]	@ (8001f90 <HAL_GPIO_Init+0x2a8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d052      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a94      	ldr	r2, [pc, #592]	@ (8001f90 <HAL_GPIO_Init+0x2a8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d869      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d42:	4a94      	ldr	r2, [pc, #592]	@ (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d04c      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d48:	4a92      	ldr	r2, [pc, #584]	@ (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d863      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d4e:	4a92      	ldr	r2, [pc, #584]	@ (8001f98 <HAL_GPIO_Init+0x2b0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d046      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d54:	4a90      	ldr	r2, [pc, #576]	@ (8001f98 <HAL_GPIO_Init+0x2b0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d85d      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d82a      	bhi.n	8001db4 <HAL_GPIO_Init+0xcc>
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d859      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d62:	a201      	add	r2, pc, #4	@ (adr r2, 8001d68 <HAL_GPIO_Init+0x80>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001de3 	.word	0x08001de3
 8001d6c:	08001dbd 	.word	0x08001dbd
 8001d70:	08001dcf 	.word	0x08001dcf
 8001d74:	08001e11 	.word	0x08001e11
 8001d78:	08001e17 	.word	0x08001e17
 8001d7c:	08001e17 	.word	0x08001e17
 8001d80:	08001e17 	.word	0x08001e17
 8001d84:	08001e17 	.word	0x08001e17
 8001d88:	08001e17 	.word	0x08001e17
 8001d8c:	08001e17 	.word	0x08001e17
 8001d90:	08001e17 	.word	0x08001e17
 8001d94:	08001e17 	.word	0x08001e17
 8001d98:	08001e17 	.word	0x08001e17
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001e17 	.word	0x08001e17
 8001da4:	08001e17 	.word	0x08001e17
 8001da8:	08001e17 	.word	0x08001e17
 8001dac:	08001dc5 	.word	0x08001dc5
 8001db0:	08001dd9 	.word	0x08001dd9
 8001db4:	4a79      	ldr	r2, [pc, #484]	@ (8001f9c <HAL_GPIO_Init+0x2b4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dba:	e02c      	b.n	8001e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	623b      	str	r3, [r7, #32]
          break;
 8001dc2:	e029      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e024      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	623b      	str	r3, [r7, #32]
          break;
 8001dd6:	e01f      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	330c      	adds	r3, #12
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e01a      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dea:	2304      	movs	r3, #4
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e013      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	611a      	str	r2, [r3, #16]
          break;
 8001e02:	e009      	b.n	8001e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e04:	2308      	movs	r3, #8
 8001e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	615a      	str	r2, [r3, #20]
          break;
 8001e0e:	e003      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          break;
 8001e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2bff      	cmp	r3, #255	@ 0xff
 8001e1c:	d801      	bhi.n	8001e22 <HAL_GPIO_Init+0x13a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	e001      	b.n	8001e26 <HAL_GPIO_Init+0x13e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2bff      	cmp	r3, #255	@ 0xff
 8001e2c:	d802      	bhi.n	8001e34 <HAL_GPIO_Init+0x14c>
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0x152>
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	3b08      	subs	r3, #8
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	210f      	movs	r1, #15
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	431a      	orrs	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80b1 	beq.w	8001fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e68:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e80:	4a48      	ldr	r2, [pc, #288]	@ (8001fa4 <HAL_GPIO_Init+0x2bc>)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a40      	ldr	r2, [pc, #256]	@ (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_GPIO_Init+0x1ec>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3f      	ldr	r2, [pc, #252]	@ (8001fac <HAL_GPIO_Init+0x2c4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_GPIO_Init+0x1e8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb0 <HAL_GPIO_Init+0x2c8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1e4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8001fb4 <HAL_GPIO_Init+0x2cc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_GPIO_Init+0x1e0>
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e006      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ec8:	2304      	movs	r3, #4
 8001eca:	e004      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e002      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed8:	f002 0203 	and.w	r2, r2, #3
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	4093      	lsls	r3, r2
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ee6:	492f      	ldr	r1, [pc, #188]	@ (8001fa4 <HAL_GPIO_Init+0x2bc>)
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f00:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	492c      	ldr	r1, [pc, #176]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4928      	ldr	r1, [pc, #160]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f28:	4b23      	ldr	r3, [pc, #140]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	4922      	ldr	r1, [pc, #136]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60cb      	str	r3, [r1, #12]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f36:	4b20      	ldr	r3, [pc, #128]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	491e      	ldr	r1, [pc, #120]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f50:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4918      	ldr	r1, [pc, #96]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f5e:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4914      	ldr	r1, [pc, #80]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d021      	beq.n	8001fbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f78:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	490e      	ldr	r1, [pc, #56]	@ (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
 8001f84:	e021      	b.n	8001fca <HAL_GPIO_Init+0x2e2>
 8001f86:	bf00      	nop
 8001f88:	10320000 	.word	0x10320000
 8001f8c:	10310000 	.word	0x10310000
 8001f90:	10220000 	.word	0x10220000
 8001f94:	10210000 	.word	0x10210000
 8001f98:	10120000 	.word	0x10120000
 8001f9c:	10110000 	.word	0x10110000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40010800 	.word	0x40010800
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	40011400 	.word	0x40011400
 8001fb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <HAL_GPIO_Init+0x304>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	4909      	ldr	r1, [pc, #36]	@ (8001fec <HAL_GPIO_Init+0x304>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	3301      	adds	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f47f ae8e 	bne.w	8001cfc <HAL_GPIO_Init+0x14>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	372c      	adds	r7, #44	@ 0x2c
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	887b      	ldrh	r3, [r7, #2]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e001      	b.n	8002012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	807b      	strh	r3, [r7, #2]
 800202a:	4613      	mov	r3, r2
 800202c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202e:	787b      	ldrb	r3, [r7, #1]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002034:	887a      	ldrh	r2, [r7, #2]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800203a:	e003      	b.n	8002044 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	041a      	lsls	r2, r3, #16
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	611a      	str	r2, [r3, #16]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
	...

08002050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e272      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8087 	beq.w	800217e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002070:	4b92      	ldr	r3, [pc, #584]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b04      	cmp	r3, #4
 800207a:	d00c      	beq.n	8002096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800207c:	4b8f      	ldr	r3, [pc, #572]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d112      	bne.n	80020ae <HAL_RCC_OscConfig+0x5e>
 8002088:	4b8c      	ldr	r3, [pc, #560]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002094:	d10b      	bne.n	80020ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002096:	4b89      	ldr	r3, [pc, #548]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06c      	beq.n	800217c <HAL_RCC_OscConfig+0x12c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d168      	bne.n	800217c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e24c      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x76>
 80020b8:	4b80      	ldr	r3, [pc, #512]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7f      	ldr	r2, [pc, #508]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e02e      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020ce:	4b7b      	ldr	r3, [pc, #492]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a7a      	ldr	r2, [pc, #488]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b78      	ldr	r3, [pc, #480]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a77      	ldr	r2, [pc, #476]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e01d      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0xbc>
 80020f2:	4b72      	ldr	r3, [pc, #456]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a71      	ldr	r2, [pc, #452]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b6f      	ldr	r3, [pc, #444]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6e      	ldr	r2, [pc, #440]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 800210c:	4b6b      	ldr	r3, [pc, #428]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a6a      	ldr	r2, [pc, #424]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b68      	ldr	r3, [pc, #416]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a67      	ldr	r2, [pc, #412]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 800211e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d013      	beq.n	8002154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fca0 	bl	8001a70 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fc9c 	bl	8001a70 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	@ 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e200      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b5d      	ldr	r3, [pc, #372]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0xe4>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fc8c 	bl	8001a70 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7ff fc88 	bl	8001a70 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	@ 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1ec      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	4b53      	ldr	r3, [pc, #332]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x10c>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d063      	beq.n	8002252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218a:	4b4c      	ldr	r3, [pc, #304]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00b      	beq.n	80021ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002196:	4b49      	ldr	r3, [pc, #292]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d11c      	bne.n	80021dc <HAL_RCC_OscConfig+0x18c>
 80021a2:	4b46      	ldr	r3, [pc, #280]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d116      	bne.n	80021dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	4b43      	ldr	r3, [pc, #268]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e1c0      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c6:	4b3d      	ldr	r3, [pc, #244]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4939      	ldr	r1, [pc, #228]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	e03a      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d020      	beq.n	8002226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e4:	4b36      	ldr	r3, [pc, #216]	@ (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fc41 	bl	8001a70 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f2:	f7ff fc3d 	bl	8001a70 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e1a1      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	4b2d      	ldr	r3, [pc, #180]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4b2a      	ldr	r3, [pc, #168]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4927      	ldr	r1, [pc, #156]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	e015      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fc20 	bl	8001a70 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002234:	f7ff fc1c 	bl	8001a70 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e180      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d03a      	beq.n	80022d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d019      	beq.n	800229a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002266:	4b17      	ldr	r3, [pc, #92]	@ (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002268:	2201      	movs	r2, #1
 800226a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226c:	f7ff fc00 	bl	8001a70 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7ff fbfc 	bl	8001a70 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e160      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002292:	2001      	movs	r0, #1
 8002294:	f000 face 	bl	8002834 <RCC_Delay>
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229a:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <HAL_RCC_OscConfig+0x274>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7ff fbe6 	bl	8001a70 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a6:	e00f      	b.n	80022c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a8:	f7ff fbe2 	bl	8001a70 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d908      	bls.n	80022c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e146      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	42420000 	.word	0x42420000
 80022c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	4b92      	ldr	r3, [pc, #584]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e9      	bne.n	80022a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a6 	beq.w	800242e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b88      	ldr	r3, [pc, #544]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a87      	ldr	r2, [pc, #540]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b85      	ldr	r3, [pc, #532]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230a:	2301      	movs	r3, #1
 800230c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b82      	ldr	r3, [pc, #520]	@ (8002518 <HAL_RCC_OscConfig+0x4c8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d118      	bne.n	800234c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231a:	4b7f      	ldr	r3, [pc, #508]	@ (8002518 <HAL_RCC_OscConfig+0x4c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7e      	ldr	r2, [pc, #504]	@ (8002518 <HAL_RCC_OscConfig+0x4c8>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002326:	f7ff fba3 	bl	8001a70 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232e:	f7ff fb9f 	bl	8001a70 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b64      	cmp	r3, #100	@ 0x64
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e103      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b75      	ldr	r3, [pc, #468]	@ (8002518 <HAL_RCC_OscConfig+0x4c8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x312>
 8002354:	4b6f      	ldr	r3, [pc, #444]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a6e      	ldr	r2, [pc, #440]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	e02d      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x334>
 800236a:	4b6a      	ldr	r3, [pc, #424]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a69      	ldr	r2, [pc, #420]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	4b67      	ldr	r3, [pc, #412]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a66      	ldr	r2, [pc, #408]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	e01c      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d10c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x356>
 800238c:	4b61      	ldr	r3, [pc, #388]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a60      	ldr	r2, [pc, #384]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	4b5e      	ldr	r3, [pc, #376]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a5d      	ldr	r2, [pc, #372]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e00b      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 80023a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a5a      	ldr	r2, [pc, #360]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b58      	ldr	r3, [pc, #352]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a57      	ldr	r2, [pc, #348]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d015      	beq.n	80023f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7ff fb53 	bl	8001a70 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7ff fb4f 	bl	8001a70 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0b1      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ee      	beq.n	80023ce <HAL_RCC_OscConfig+0x37e>
 80023f0:	e014      	b.n	800241c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fb3d 	bl	8001a70 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7ff fb39 	bl	8001a70 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e09b      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	4b40      	ldr	r3, [pc, #256]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ee      	bne.n	80023fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b3c      	ldr	r3, [pc, #240]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4a3b      	ldr	r2, [pc, #236]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800242c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8087 	beq.w	8002546 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002438:	4b36      	ldr	r3, [pc, #216]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d061      	beq.n	8002508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d146      	bne.n	80024da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <HAL_RCC_OscConfig+0x4cc>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7ff fb0d 	bl	8001a70 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7ff fb09 	bl	8001a70 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e06d      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	4b29      	ldr	r3, [pc, #164]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002480:	d108      	bne.n	8002494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002482:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4921      	ldr	r1, [pc, #132]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a19      	ldr	r1, [r3, #32]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	430b      	orrs	r3, r1
 80024a6:	491b      	ldr	r1, [pc, #108]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <HAL_RCC_OscConfig+0x4cc>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7ff fadd 	bl	8001a70 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff fad9 	bl	8001a70 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e03d      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x46a>
 80024d8:	e035      	b.n	8002546 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <HAL_RCC_OscConfig+0x4cc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fac6 	bl	8001a70 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff fac2 	bl	8001a70 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e026      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x498>
 8002506:	e01e      	b.n	8002546 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e019      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
 8002514:	40021000 	.word	0x40021000
 8002518:	40007000 	.word	0x40007000
 800251c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_RCC_OscConfig+0x500>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	429a      	cmp	r2, r3
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000

08002554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0d0      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4b6a      	ldr	r3, [pc, #424]	@ (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d910      	bls.n	8002598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b67      	ldr	r3, [pc, #412]	@ (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 0207 	bic.w	r2, r3, #7
 800257e:	4965      	ldr	r1, [pc, #404]	@ (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b63      	ldr	r3, [pc, #396]	@ (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b8      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4b59      	ldr	r3, [pc, #356]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a58      	ldr	r2, [pc, #352]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c8:	4b53      	ldr	r3, [pc, #332]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a52      	ldr	r2, [pc, #328]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80025d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b50      	ldr	r3, [pc, #320]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	494d      	ldr	r1, [pc, #308]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d040      	beq.n	8002674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d115      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07f      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e073      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	4b3d      	ldr	r3, [pc, #244]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06b      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002632:	4b39      	ldr	r3, [pc, #228]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4936      	ldr	r1, [pc, #216]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002644:	f7ff fa14 	bl	8001a70 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	e00a      	b.n	8002662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264c:	f7ff fa10 	bl	8001a70 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e053      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 020c 	and.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1eb      	bne.n	800264c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002674:	4b27      	ldr	r3, [pc, #156]	@ (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d210      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 0207 	bic.w	r2, r3, #7
 800268a:	4922      	ldr	r1, [pc, #136]	@ (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b20      	ldr	r3, [pc, #128]	@ (8002714 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e032      	b.n	800270a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4916      	ldr	r1, [pc, #88]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ce:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490e      	ldr	r1, [pc, #56]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 f821 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490a      	ldr	r1, [pc, #40]	@ (800271c <HAL_RCC_ClockConfig+0x1c8>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a09      	ldr	r2, [pc, #36]	@ (8002720 <HAL_RCC_ClockConfig+0x1cc>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <HAL_RCC_ClockConfig+0x1d0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f972 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40022000 	.word	0x40022000
 8002718:	40021000 	.word	0x40021000
 800271c:	08003444 	.word	0x08003444
 8002720:	20000000 	.word	0x20000000
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002742:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d002      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x30>
 8002752:	2b08      	cmp	r3, #8
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x36>
 8002756:	e027      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002758:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800275a:	613b      	str	r3, [r7, #16]
      break;
 800275c:	e027      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	4a17      	ldr	r2, [pc, #92]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002776:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0c5b      	lsrs	r3, r3, #17
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	4a11      	ldr	r2, [pc, #68]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a0d      	ldr	r2, [pc, #52]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800278a:	fb03 f202 	mul.w	r2, r3, r2
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e004      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a0c      	ldr	r2, [pc, #48]	@ (80027cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	613b      	str	r3, [r7, #16]
      break;
 80027a6:	e002      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80027aa:	613b      	str	r3, [r7, #16]
      break;
 80027ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ae:	693b      	ldr	r3, [r7, #16]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	007a1200 	.word	0x007a1200
 80027c4:	0800345c 	.word	0x0800345c
 80027c8:	0800346c 	.word	0x0800346c
 80027cc:	003d0900 	.word	0x003d0900

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b02      	ldr	r3, [pc, #8]	@ (80027e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000000 	.word	0x20000000

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e8:	f7ff fff2 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4903      	ldr	r1, [pc, #12]	@ (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08003454 	.word	0x08003454

0800280c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002810:	f7ff ffde 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	@ (800282c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0adb      	lsrs	r3, r3, #11
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	@ (8002830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	08003454 	.word	0x08003454

08002834 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800283c:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <RCC_Delay+0x34>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	@ (800286c <RCC_Delay+0x38>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0a5b      	lsrs	r3, r3, #9
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002850:	bf00      	nop
  }
  while (Delay --);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e5a      	subs	r2, r3, #1
 8002856:	60fa      	str	r2, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f9      	bne.n	8002850 <RCC_Delay+0x1c>
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000000 	.word	0x20000000
 800286c:	10624dd3 	.word	0x10624dd3

08002870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e076      	b.n	8002970 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	2b00      	cmp	r3, #0
 8002888:	d108      	bne.n	800289c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002892:	d009      	beq.n	80028a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
 800289a:	e005      	b.n	80028a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe ff5a 	bl	800177c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292c:	ea42 0103 	orr.w	r1, r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	0c1a      	lsrs	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f002 0204 	and.w	r2, r2, #4
 800294e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800295e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e041      	b.n	8002a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe ff36 	bl	8001810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4610      	mov	r0, r2
 80029b8:	f000 fac6 	bl	8002f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d001      	beq.n	8002a30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	@ (8002aa0 <HAL_TIM_Base_Start+0x88>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00e      	beq.n	8002a60 <HAL_TIM_Base_Start+0x48>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4a:	d009      	beq.n	8002a60 <HAL_TIM_Base_Start+0x48>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a14      	ldr	r2, [pc, #80]	@ (8002aa4 <HAL_TIM_Base_Start+0x8c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_TIM_Base_Start+0x48>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a13      	ldr	r2, [pc, #76]	@ (8002aa8 <HAL_TIM_Base_Start+0x90>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d111      	bne.n	8002a84 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d010      	beq.n	8002a94 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a82:	e007      	b.n	8002a94 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800

08002aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d001      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e03a      	b.n	8002b3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a18      	ldr	r2, [pc, #96]	@ (8002b44 <HAL_TIM_Base_Start_IT+0x98>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00e      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aee:	d009      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a14      	ldr	r2, [pc, #80]	@ (8002b48 <HAL_TIM_Base_Start_IT+0x9c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a13      	ldr	r2, [pc, #76]	@ (8002b4c <HAL_TIM_Base_Start_IT+0xa0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d111      	bne.n	8002b28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d010      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	e007      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800

08002b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0202 	mvn.w	r2, #2
 8002b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f9bd 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f9b0 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f9bf 	bl	8002f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d122      	bne.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d11b      	bne.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0204 	mvn.w	r2, #4
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f993 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f986 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f995 	bl	8002f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d122      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d11b      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0208 	mvn.w	r2, #8
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f969 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f95c 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f96b 	bl	8002f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d122      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0210 	mvn.w	r2, #16
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f93f 	bl	8002f12 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f932 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f941 	bl	8002f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d107      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0201 	mvn.w	r2, #1
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f90d 	bl	8002eee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cde:	2b80      	cmp	r3, #128	@ 0x80
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cec:	2b80      	cmp	r3, #128	@ 0x80
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fa83 	bl	8003206 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0a:	2b40      	cmp	r3, #64	@ 0x40
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f905 	bl	8002f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0220 	mvn.w	r2, #32
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa4e 	bl	80031f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_TIM_ConfigClockSource+0x1c>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e0b4      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x186>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002db4:	d03e      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0xd4>
 8002db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dba:	f200 8087 	bhi.w	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc2:	f000 8086 	beq.w	8002ed2 <HAL_TIM_ConfigClockSource+0x172>
 8002dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dca:	d87f      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002dcc:	2b70      	cmp	r3, #112	@ 0x70
 8002dce:	d01a      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0xa6>
 8002dd0:	2b70      	cmp	r3, #112	@ 0x70
 8002dd2:	d87b      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002dd4:	2b60      	cmp	r3, #96	@ 0x60
 8002dd6:	d050      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x11a>
 8002dd8:	2b60      	cmp	r3, #96	@ 0x60
 8002dda:	d877      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	2b50      	cmp	r3, #80	@ 0x50
 8002dde:	d03c      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0xfa>
 8002de0:	2b50      	cmp	r3, #80	@ 0x50
 8002de2:	d873      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002de4:	2b40      	cmp	r3, #64	@ 0x40
 8002de6:	d058      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x13a>
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d86f      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002dec:	2b30      	cmp	r3, #48	@ 0x30
 8002dee:	d064      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15a>
 8002df0:	2b30      	cmp	r3, #48	@ 0x30
 8002df2:	d86b      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d060      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15a>
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d867      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d05c      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15a>
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d05a      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15a>
 8002e04:	e062      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e16:	f000 f970 	bl	80030fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	609a      	str	r2, [r3, #8]
      break;
 8002e32:	e04f      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e44:	f000 f959 	bl	80030fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e56:	609a      	str	r2, [r3, #8]
      break;
 8002e58:	e03c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e66:	461a      	mov	r2, r3
 8002e68:	f000 f8d0 	bl	800300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2150      	movs	r1, #80	@ 0x50
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f927 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002e78:	e02c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e86:	461a      	mov	r2, r3
 8002e88:	f000 f8ee 	bl	8003068 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2160      	movs	r1, #96	@ 0x60
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f917 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002e98:	e01c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f000 f8b0 	bl	800300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2140      	movs	r1, #64	@ 0x40
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f907 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002eb8:	e00c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f000 f8fe 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002eca:	e003      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed0:	e000      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a29      	ldr	r2, [pc, #164]	@ (8003000 <TIM_Base_SetConfig+0xb8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00b      	beq.n	8002f78 <TIM_Base_SetConfig+0x30>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f66:	d007      	beq.n	8002f78 <TIM_Base_SetConfig+0x30>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a26      	ldr	r2, [pc, #152]	@ (8003004 <TIM_Base_SetConfig+0xbc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <TIM_Base_SetConfig+0x30>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a25      	ldr	r2, [pc, #148]	@ (8003008 <TIM_Base_SetConfig+0xc0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d108      	bne.n	8002f8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <TIM_Base_SetConfig+0xb8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00b      	beq.n	8002faa <TIM_Base_SetConfig+0x62>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f98:	d007      	beq.n	8002faa <TIM_Base_SetConfig+0x62>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a19      	ldr	r2, [pc, #100]	@ (8003004 <TIM_Base_SetConfig+0xbc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_Base_SetConfig+0x62>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a18      	ldr	r2, [pc, #96]	@ (8003008 <TIM_Base_SetConfig+0xc0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d108      	bne.n	8002fbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a07      	ldr	r2, [pc, #28]	@ (8003000 <TIM_Base_SetConfig+0xb8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d103      	bne.n	8002ff0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	615a      	str	r2, [r3, #20]
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800

0800300c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0201 	bic.w	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f023 030a 	bic.w	r3, r3, #10
 8003048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f023 0210 	bic.w	r2, r3, #16
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	031b      	lsls	r3, r3, #12
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	621a      	str	r2, [r3, #32]
}
 80030bc:	bf00      	nop
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f043 0307 	orr.w	r3, r3, #7
 80030e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003114:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	021a      	lsls	r2, r3, #8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	431a      	orrs	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4313      	orrs	r3, r2
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	609a      	str	r2, [r3, #8]
}
 800312e:	bf00      	nop
 8003130:	371c      	adds	r7, #28
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800314c:	2302      	movs	r3, #2
 800314e:	e046      	b.n	80031de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a16      	ldr	r2, [pc, #88]	@ (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319c:	d009      	beq.n	80031b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a12      	ldr	r2, [pc, #72]	@ (80031ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a10      	ldr	r2, [pc, #64]	@ (80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10c      	bne.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40000800 	.word	0x40000800

080031f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e042      	b.n	80032b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fe fb0a 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2224      	movs	r2, #36	@ 0x24
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800325a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f82b 	bl	80032b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80032f2:	f023 030c 	bic.w	r3, r3, #12
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2c      	ldr	r2, [pc, #176]	@ (80033cc <UART_SetConfig+0x114>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d103      	bne.n	8003328 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003320:	f7ff fa74 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	e002      	b.n	800332e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003328:	f7ff fa5c 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 800332c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	009a      	lsls	r2, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	4a22      	ldr	r2, [pc, #136]	@ (80033d0 <UART_SetConfig+0x118>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	0119      	lsls	r1, r3, #4
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009a      	lsls	r2, r3, #2
 8003358:	441a      	add	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	fbb2 f2f3 	udiv	r2, r2, r3
 8003364:	4b1a      	ldr	r3, [pc, #104]	@ (80033d0 <UART_SetConfig+0x118>)
 8003366:	fba3 0302 	umull	r0, r3, r3, r2
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2064      	movs	r0, #100	@ 0x64
 800336e:	fb00 f303 	mul.w	r3, r0, r3
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	3332      	adds	r3, #50	@ 0x32
 8003378:	4a15      	ldr	r2, [pc, #84]	@ (80033d0 <UART_SetConfig+0x118>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003384:	4419      	add	r1, r3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	009a      	lsls	r2, r3, #2
 8003390:	441a      	add	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	fbb2 f2f3 	udiv	r2, r2, r3
 800339c:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <UART_SetConfig+0x118>)
 800339e:	fba3 0302 	umull	r0, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2064      	movs	r0, #100	@ 0x64
 80033a6:	fb00 f303 	mul.w	r3, r0, r3
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	3332      	adds	r3, #50	@ 0x32
 80033b0:	4a07      	ldr	r2, [pc, #28]	@ (80033d0 <UART_SetConfig+0x118>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	f003 020f 	and.w	r2, r3, #15
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	440a      	add	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40013800 	.word	0x40013800
 80033d0:	51eb851f 	.word	0x51eb851f

080033d4 <memset>:
 80033d4:	4603      	mov	r3, r0
 80033d6:	4402      	add	r2, r0
 80033d8:	4293      	cmp	r3, r2
 80033da:	d100      	bne.n	80033de <memset+0xa>
 80033dc:	4770      	bx	lr
 80033de:	f803 1b01 	strb.w	r1, [r3], #1
 80033e2:	e7f9      	b.n	80033d8 <memset+0x4>

080033e4 <__libc_init_array>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	2600      	movs	r6, #0
 80033e8:	4d0c      	ldr	r5, [pc, #48]	@ (800341c <__libc_init_array+0x38>)
 80033ea:	4c0d      	ldr	r4, [pc, #52]	@ (8003420 <__libc_init_array+0x3c>)
 80033ec:	1b64      	subs	r4, r4, r5
 80033ee:	10a4      	asrs	r4, r4, #2
 80033f0:	42a6      	cmp	r6, r4
 80033f2:	d109      	bne.n	8003408 <__libc_init_array+0x24>
 80033f4:	f000 f81a 	bl	800342c <_init>
 80033f8:	2600      	movs	r6, #0
 80033fa:	4d0a      	ldr	r5, [pc, #40]	@ (8003424 <__libc_init_array+0x40>)
 80033fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003428 <__libc_init_array+0x44>)
 80033fe:	1b64      	subs	r4, r4, r5
 8003400:	10a4      	asrs	r4, r4, #2
 8003402:	42a6      	cmp	r6, r4
 8003404:	d105      	bne.n	8003412 <__libc_init_array+0x2e>
 8003406:	bd70      	pop	{r4, r5, r6, pc}
 8003408:	f855 3b04 	ldr.w	r3, [r5], #4
 800340c:	4798      	blx	r3
 800340e:	3601      	adds	r6, #1
 8003410:	e7ee      	b.n	80033f0 <__libc_init_array+0xc>
 8003412:	f855 3b04 	ldr.w	r3, [r5], #4
 8003416:	4798      	blx	r3
 8003418:	3601      	adds	r6, #1
 800341a:	e7f2      	b.n	8003402 <__libc_init_array+0x1e>
 800341c:	08003470 	.word	0x08003470
 8003420:	08003470 	.word	0x08003470
 8003424:	08003470 	.word	0x08003470
 8003428:	08003474 	.word	0x08003474

0800342c <_init>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	bf00      	nop
 8003430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003432:	bc08      	pop	{r3}
 8003434:	469e      	mov	lr, r3
 8003436:	4770      	bx	lr

08003438 <_fini>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr
