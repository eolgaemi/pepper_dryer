
pepper_dryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002234  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002340  08002340  00003340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002394  08002394  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002394  08002394  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002394  08002394  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002394  08002394  00003394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002398  08002398  00003398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800239c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08002404  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08002404  00004278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000869d  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177d  00000000  00000000  0000c72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000deb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069a  00000000  00000000  0000e758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bea  00000000  00000000  0000edf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ef9  00000000  00000000  000269dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085590  00000000  00000000  000308d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5e65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b4  00000000  00000000  000b5ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000b875c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002328 	.word	0x08002328

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002328 	.word	0x08002328

0800014c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *p, int len){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)p, len, 10);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	230a      	movs	r3, #10
 800015e:	68b9      	ldr	r1, [r7, #8]
 8000160:	4803      	ldr	r0, [pc, #12]	@ (8000170 <_write+0x24>)
 8000162:	f001 fabb 	bl	80016dc <HAL_UART_Transmit>
	return len;
 8000166:	687b      	ldr	r3, [r7, #4]
}
 8000168:	4618      	mov	r0, r3
 800016a:	3710      	adds	r7, #16
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	200000dc 	.word	0x200000dc

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b590      	push	{r4, r7, lr}
 8000176:	b087      	sub	sp, #28
 8000178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017a:	f000 fac5 	bl	8000708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017e:	f000 f81d 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000182:	f000 f8b7 	bl	80002f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000186:	f000 f855 	bl	8000234 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800018a:	f000 f889 	bl	80002a0 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // GPIOC, GPIO_LED0_GPIO_Port
  //volatile unsigned int * reg2 = 0x40011010;
  //char data[10] = {'a','b'};
  char senddata[20] = "hello world\r\n";
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <main+0x40>)
 8000190:	1d3c      	adds	r4, r7, #4
 8000192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000194:	c407      	stmia	r4!, {r0, r1, r2}
 8000196:	8023      	strh	r3, [r4, #0]
 8000198:	f107 0312 	add.w	r3, r7, #18
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	809a      	strh	r2, [r3, #4]
	  HAL_Delay(1000);
	  HAL_GPIO_WritePin(GPIO_TEST_GPIO_Port, GPIO_TEST_Pin, 0);
	  HAL_Delay(1000);
	  */
	  //HAL_UART_Transmit(&huart1, senddata, strlen(senddata), 1000);
	  printf("hello world printf\r\n");
 80001a2:	4805      	ldr	r0, [pc, #20]	@ (80001b8 <main+0x44>)
 80001a4:	f001 fd32 	bl	8001c0c <puts>
	  HAL_Delay(1000);
 80001a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ac:	f000 fb0e 	bl	80007cc <HAL_Delay>
	  printf("hello world printf\r\n");
 80001b0:	bf00      	nop
 80001b2:	e7f6      	b.n	80001a2 <main+0x2e>
 80001b4:	08002354 	.word	0x08002354
 80001b8:	08002340 	.word	0x08002340

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	@ 0x40
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	@ 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f001 fdfe 	bl	8001dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001de:	2302      	movs	r3, #2
 80001e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e2:	2301      	movs	r3, #1
 80001e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e6:	2310      	movs	r3, #16
 80001e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ea:	2300      	movs	r3, #0
 80001ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fd8e 	bl	8000d14 <HAL_RCC_OscConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001fe:	f000 f8d9 	bl	80003b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000202:	230f      	movs	r3, #15
 8000204:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fffc 	bl	8001218 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000226:	f000 f8c5 	bl	80003b4 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	@ 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000238:	4b17      	ldr	r3, [pc, #92]	@ (8000298 <MX_SPI1_Init+0x64>)
 800023a:	4a18      	ldr	r2, [pc, #96]	@ (800029c <MX_SPI1_Init+0x68>)
 800023c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800023e:	4b16      	ldr	r3, [pc, #88]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000240:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000244:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000246:	4b14      	ldr	r3, [pc, #80]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <MX_SPI1_Init+0x64>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000252:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000258:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <MX_SPI1_Init+0x64>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800025e:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000264:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000266:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000268:	2200      	movs	r2, #0
 800026a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800026c:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <MX_SPI1_Init+0x64>)
 800026e:	2200      	movs	r2, #0
 8000270:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000272:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000274:	2200      	movs	r2, #0
 8000276:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000278:	4b07      	ldr	r3, [pc, #28]	@ (8000298 <MX_SPI1_Init+0x64>)
 800027a:	2200      	movs	r2, #0
 800027c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800027e:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000280:	220a      	movs	r2, #10
 8000282:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <MX_SPI1_Init+0x64>)
 8000286:	f001 f955 	bl	8001534 <HAL_SPI_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000290:	f000 f890 	bl	80003b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000084 	.word	0x20000084
 800029c:	40013000 	.word	0x40013000

080002a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002a4:	4b11      	ldr	r3, [pc, #68]	@ (80002ec <MX_USART1_UART_Init+0x4c>)
 80002a6:	4a12      	ldr	r2, [pc, #72]	@ (80002f0 <MX_USART1_UART_Init+0x50>)
 80002a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002aa:	4b10      	ldr	r3, [pc, #64]	@ (80002ec <MX_USART1_UART_Init+0x4c>)
 80002ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	@ (80002ec <MX_USART1_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <MX_USART1_UART_Init+0x4c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002be:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <MX_USART1_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c4:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <MX_USART1_UART_Init+0x4c>)
 80002c6:	220c      	movs	r2, #12
 80002c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ca:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <MX_USART1_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <MX_USART1_UART_Init+0x4c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d6:	4805      	ldr	r0, [pc, #20]	@ (80002ec <MX_USART1_UART_Init+0x4c>)
 80002d8:	f001 f9b0 	bl	800163c <HAL_UART_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002e2:	f000 f867 	bl	80003b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	200000dc 	.word	0x200000dc
 80002f0:	40013800 	.word	0x40013800

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000308:	4b27      	ldr	r3, [pc, #156]	@ (80003a8 <MX_GPIO_Init+0xb4>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a26      	ldr	r2, [pc, #152]	@ (80003a8 <MX_GPIO_Init+0xb4>)
 800030e:	f043 0310 	orr.w	r3, r3, #16
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b24      	ldr	r3, [pc, #144]	@ (80003a8 <MX_GPIO_Init+0xb4>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0310 	and.w	r3, r3, #16
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000320:	4b21      	ldr	r3, [pc, #132]	@ (80003a8 <MX_GPIO_Init+0xb4>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a20      	ldr	r2, [pc, #128]	@ (80003a8 <MX_GPIO_Init+0xb4>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b1e      	ldr	r3, [pc, #120]	@ (80003a8 <MX_GPIO_Init+0xb4>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0304 	and.w	r3, r3, #4
 8000334:	603b      	str	r3, [r7, #0]
 8000336:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED0_GPIO_Port, GPIO_LED0_Pin, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800033e:	481b      	ldr	r0, [pc, #108]	@ (80003ac <MX_GPIO_Init+0xb8>)
 8000340:	f000 fcd0 	bl	8000ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TEST_GPIO_Port, GPIO_TEST_Pin, GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2108      	movs	r1, #8
 8000348:	4819      	ldr	r0, [pc, #100]	@ (80003b0 <MX_GPIO_Init+0xbc>)
 800034a:	f000 fccb 	bl	8000ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED0_Pin */
  GPIO_InitStruct.Pin = GPIO_LED0_Pin;
 800034e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000358:	2302      	movs	r3, #2
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035c:	2303      	movs	r3, #3
 800035e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_LED0_GPIO_Port, &GPIO_InitStruct);
 8000360:	f107 0308 	add.w	r3, r7, #8
 8000364:	4619      	mov	r1, r3
 8000366:	4811      	ldr	r0, [pc, #68]	@ (80003ac <MX_GPIO_Init+0xb8>)
 8000368:	f000 fb38 	bl	80009dc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SWITCH_Pin */
  GPIO_InitStruct.Pin = GPIO_SWITCH_Pin;
 800036c:	2301      	movs	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000374:	2301      	movs	r3, #1
 8000376:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000378:	f107 0308 	add.w	r3, r7, #8
 800037c:	4619      	mov	r1, r3
 800037e:	480c      	ldr	r0, [pc, #48]	@ (80003b0 <MX_GPIO_Init+0xbc>)
 8000380:	f000 fb2c 	bl	80009dc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TEST_Pin */
  GPIO_InitStruct.Pin = GPIO_TEST_Pin;
 8000384:	2308      	movs	r3, #8
 8000386:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000388:	2301      	movs	r3, #1
 800038a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800038c:	2301      	movs	r3, #1
 800038e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000390:	2303      	movs	r3, #3
 8000392:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_TEST_GPIO_Port, &GPIO_InitStruct);
 8000394:	f107 0308 	add.w	r3, r7, #8
 8000398:	4619      	mov	r1, r3
 800039a:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <MX_GPIO_Init+0xbc>)
 800039c:	f000 fb1e 	bl	80009dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a0:	bf00      	nop
 80003a2:	3718      	adds	r7, #24
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40011000 	.word	0x40011000
 80003b0:	40010800 	.word	0x40010800

080003b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b8:	b672      	cpsid	i
}
 80003ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <Error_Handler+0x8>

080003c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c6:	4b15      	ldr	r3, [pc, #84]	@ (800041c <HAL_MspInit+0x5c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a14      	ldr	r2, [pc, #80]	@ (800041c <HAL_MspInit+0x5c>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b12      	ldr	r3, [pc, #72]	@ (800041c <HAL_MspInit+0x5c>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <HAL_MspInit+0x5c>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <HAL_MspInit+0x5c>)
 80003e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003e8:	61d3      	str	r3, [r2, #28]
 80003ea:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <HAL_MspInit+0x5c>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <HAL_MspInit+0x60>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	4a04      	ldr	r2, [pc, #16]	@ (8000420 <HAL_MspInit+0x60>)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000412:	bf00      	nop
 8000414:	3714      	adds	r7, #20
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	40021000 	.word	0x40021000
 8000420:	40010000 	.word	0x40010000

08000424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a1b      	ldr	r2, [pc, #108]	@ (80004ac <HAL_SPI_MspInit+0x88>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d12f      	bne.n	80004a4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000444:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <HAL_SPI_MspInit+0x8c>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a19      	ldr	r2, [pc, #100]	@ (80004b0 <HAL_SPI_MspInit+0x8c>)
 800044a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b17      	ldr	r3, [pc, #92]	@ (80004b0 <HAL_SPI_MspInit+0x8c>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <HAL_SPI_MspInit+0x8c>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a13      	ldr	r2, [pc, #76]	@ (80004b0 <HAL_SPI_MspInit+0x8c>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <HAL_SPI_MspInit+0x8c>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000474:	23a0      	movs	r3, #160	@ 0xa0
 8000476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000478:	2302      	movs	r3, #2
 800047a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800047c:	2303      	movs	r3, #3
 800047e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4619      	mov	r1, r3
 8000486:	480b      	ldr	r0, [pc, #44]	@ (80004b4 <HAL_SPI_MspInit+0x90>)
 8000488:	f000 faa8 	bl	80009dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800048c:	2340      	movs	r3, #64	@ 0x40
 800048e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	4619      	mov	r1, r3
 800049e:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <HAL_SPI_MspInit+0x90>)
 80004a0:	f000 fa9c 	bl	80009dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004a4:	bf00      	nop
 80004a6:	3720      	adds	r7, #32
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40013000 	.word	0x40013000
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010800 	.word	0x40010800

080004b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000544 <HAL_UART_MspInit+0x8c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d131      	bne.n	800053c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000548 <HAL_UART_MspInit+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000548 <HAL_UART_MspInit+0x90>)
 80004de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <HAL_UART_MspInit+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <HAL_UART_MspInit+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a14      	ldr	r2, [pc, #80]	@ (8000548 <HAL_UART_MspInit+0x90>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <HAL_UART_MspInit+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800050c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	480b      	ldr	r0, [pc, #44]	@ (800054c <HAL_UART_MspInit+0x94>)
 800051e:	f000 fa5d 	bl	80009dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4805      	ldr	r0, [pc, #20]	@ (800054c <HAL_UART_MspInit+0x94>)
 8000538:	f000 fa50 	bl	80009dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013800 	.word	0x40013800
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <NMI_Handler+0x4>

08000558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <MemManage_Handler+0x4>

08000568 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <UsageFault_Handler+0x4>

08000578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a0:	f000 f8f8 	bl	8000794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	e00a      	b.n	80005d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005ba:	f3af 8000 	nop.w
 80005be:	4601      	mov	r1, r0
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	60ba      	str	r2, [r7, #8]
 80005c6:	b2ca      	uxtb	r2, r1
 80005c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697a      	ldr	r2, [r7, #20]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	dbf0      	blt.n	80005ba <_read+0x12>
  }

  return len;
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000608:	605a      	str	r2, [r3, #4]
  return 0;
 800060a:	2300      	movs	r3, #0
}
 800060c:	4618      	mov	r0, r3
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <_isatty>:

int _isatty(int file)
{
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
	...

08000644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800064c:	4a14      	ldr	r2, [pc, #80]	@ (80006a0 <_sbrk+0x5c>)
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <_sbrk+0x60>)
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000658:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <_sbrk+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d102      	bne.n	8000666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <_sbrk+0x64>)
 8000662:	4a12      	ldr	r2, [pc, #72]	@ (80006ac <_sbrk+0x68>)
 8000664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <_sbrk+0x64>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	429a      	cmp	r2, r3
 8000672:	d207      	bcs.n	8000684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000674:	f001 fbf8 	bl	8001e68 <__errno>
 8000678:	4603      	mov	r3, r0
 800067a:	220c      	movs	r2, #12
 800067c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	e009      	b.n	8000698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000684:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <_sbrk+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068a:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <_sbrk+0x64>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	4a05      	ldr	r2, [pc, #20]	@ (80006a8 <_sbrk+0x64>)
 8000694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000696:	68fb      	ldr	r3, [r7, #12]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20005000 	.word	0x20005000
 80006a4:	00000400 	.word	0x00000400
 80006a8:	20000124 	.word	0x20000124
 80006ac:	20000278 	.word	0x20000278

080006b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006bc:	f7ff fff8 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c0:	480b      	ldr	r0, [pc, #44]	@ (80006f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006c2:	490c      	ldr	r1, [pc, #48]	@ (80006f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006c4:	4a0c      	ldr	r2, [pc, #48]	@ (80006f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a09      	ldr	r2, [pc, #36]	@ (80006fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006d8:	4c09      	ldr	r4, [pc, #36]	@ (8000700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006e6:	f001 fbc5 	bl	8001e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ea:	f7ff fd43 	bl	8000174 <main>
  bx lr
 80006ee:	4770      	bx	lr
  ldr r0, =_sdata
 80006f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006f8:	0800239c 	.word	0x0800239c
  ldr r2, =_sbss
 80006fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000700:	20000278 	.word	0x20000278

08000704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_2_IRQHandler>
	...

08000708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070c:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <HAL_Init+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a07      	ldr	r2, [pc, #28]	@ (8000730 <HAL_Init+0x28>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f92b 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071e:	200f      	movs	r0, #15
 8000720:	f000 f808 	bl	8000734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000724:	f7ff fe4c 	bl	80003c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40022000 	.word	0x40022000

08000734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <HAL_InitTick+0x54>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_InitTick+0x58>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074a:	fbb3 f3f1 	udiv	r3, r3, r1
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f935 	bl	80009c2 <HAL_SYSTICK_Config>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e00e      	b.n	8000780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b0f      	cmp	r3, #15
 8000766:	d80a      	bhi.n	800077e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000768:	2200      	movs	r2, #0
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f000 f90b 	bl	800098a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000774:	4a06      	ldr	r2, [pc, #24]	@ (8000790 <HAL_InitTick+0x5c>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	e000      	b.n	8000780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000000 	.word	0x20000000
 800078c:	20000008 	.word	0x20000008
 8000790:	20000004 	.word	0x20000004

08000794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000798:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <HAL_IncTick+0x1c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HAL_IncTick+0x20>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a03      	ldr	r2, [pc, #12]	@ (80007b4 <HAL_IncTick+0x20>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000128 	.word	0x20000128

080007b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;
 80007bc:	4b02      	ldr	r3, [pc, #8]	@ (80007c8 <HAL_GetTick+0x10>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000128 	.word	0x20000128

080007cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d4:	f7ff fff0 	bl	80007b8 <HAL_GetTick>
 80007d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e4:	d005      	beq.n	80007f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <HAL_Delay+0x44>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007f2:	bf00      	nop
 80007f4:	f7ff ffe0 	bl	80007b8 <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d8f7      	bhi.n	80007f4 <HAL_Delay+0x28>
  {
  }
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000008 	.word	0x20000008

08000814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000830:	4013      	ands	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800083c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000846:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <__NVIC_SetPriorityGrouping+0x44>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	60d3      	str	r3, [r2, #12]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000860:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <__NVIC_GetPriorityGrouping+0x18>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	f003 0307 	and.w	r3, r3, #7
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db0a      	blt.n	80008a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	490c      	ldr	r1, [pc, #48]	@ (80008c4 <__NVIC_SetPriority+0x4c>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	440b      	add	r3, r1
 800089c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a0:	e00a      	b.n	80008b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4908      	ldr	r1, [pc, #32]	@ (80008c8 <__NVIC_SetPriority+0x50>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	3b04      	subs	r3, #4
 80008b0:	0112      	lsls	r2, r2, #4
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	440b      	add	r3, r1
 80008b6:	761a      	strb	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	@ 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f1c3 0307 	rsb	r3, r3, #7
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	bf28      	it	cs
 80008ea:	2304      	movcs	r3, #4
 80008ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3304      	adds	r3, #4
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d902      	bls.n	80008fc <NVIC_EncodePriority+0x30>
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3b03      	subs	r3, #3
 80008fa:	e000      	b.n	80008fe <NVIC_EncodePriority+0x32>
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	f04f 32ff 	mov.w	r2, #4294967295
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43da      	mvns	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	401a      	ands	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000914:	f04f 31ff 	mov.w	r1, #4294967295
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43d9      	mvns	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	4313      	orrs	r3, r2
         );
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	@ 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000940:	d301      	bcc.n	8000946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000942:	2301      	movs	r3, #1
 8000944:	e00f      	b.n	8000966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <SysTick_Config+0x40>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094e:	210f      	movs	r1, #15
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f7ff ff90 	bl	8000878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <SysTick_Config+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <SysTick_Config+0x40>)
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000e010 	.word	0xe000e010

08000974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff49 	bl	8000814 <__NVIC_SetPriorityGrouping>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099c:	f7ff ff5e 	bl	800085c <__NVIC_GetPriorityGrouping>
 80009a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff ff90 	bl	80008cc <NVIC_EncodePriority>
 80009ac:	4602      	mov	r2, r0
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff5f 	bl	8000878 <__NVIC_SetPriority>
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff ffb0 	bl	8000930 <SysTick_Config>
 80009d0:	4603      	mov	r3, r0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009dc:	b480      	push	{r7}
 80009de:	b08b      	sub	sp, #44	@ 0x2c
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ee:	e169      	b.n	8000cc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009f0:	2201      	movs	r2, #1
 80009f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	4013      	ands	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	f040 8158 	bne.w	8000cbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	4a9a      	ldr	r2, [pc, #616]	@ (8000c7c <HAL_GPIO_Init+0x2a0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d05e      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
 8000a18:	4a98      	ldr	r2, [pc, #608]	@ (8000c7c <HAL_GPIO_Init+0x2a0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d875      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a1e:	4a98      	ldr	r2, [pc, #608]	@ (8000c80 <HAL_GPIO_Init+0x2a4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d058      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
 8000a24:	4a96      	ldr	r2, [pc, #600]	@ (8000c80 <HAL_GPIO_Init+0x2a4>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d86f      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a2a:	4a96      	ldr	r2, [pc, #600]	@ (8000c84 <HAL_GPIO_Init+0x2a8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d052      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
 8000a30:	4a94      	ldr	r2, [pc, #592]	@ (8000c84 <HAL_GPIO_Init+0x2a8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d869      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a36:	4a94      	ldr	r2, [pc, #592]	@ (8000c88 <HAL_GPIO_Init+0x2ac>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d04c      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
 8000a3c:	4a92      	ldr	r2, [pc, #584]	@ (8000c88 <HAL_GPIO_Init+0x2ac>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d863      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a42:	4a92      	ldr	r2, [pc, #584]	@ (8000c8c <HAL_GPIO_Init+0x2b0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d046      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
 8000a48:	4a90      	ldr	r2, [pc, #576]	@ (8000c8c <HAL_GPIO_Init+0x2b0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d85d      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d82a      	bhi.n	8000aa8 <HAL_GPIO_Init+0xcc>
 8000a52:	2b12      	cmp	r3, #18
 8000a54:	d859      	bhi.n	8000b0a <HAL_GPIO_Init+0x12e>
 8000a56:	a201      	add	r2, pc, #4	@ (adr r2, 8000a5c <HAL_GPIO_Init+0x80>)
 8000a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5c:	08000ad7 	.word	0x08000ad7
 8000a60:	08000ab1 	.word	0x08000ab1
 8000a64:	08000ac3 	.word	0x08000ac3
 8000a68:	08000b05 	.word	0x08000b05
 8000a6c:	08000b0b 	.word	0x08000b0b
 8000a70:	08000b0b 	.word	0x08000b0b
 8000a74:	08000b0b 	.word	0x08000b0b
 8000a78:	08000b0b 	.word	0x08000b0b
 8000a7c:	08000b0b 	.word	0x08000b0b
 8000a80:	08000b0b 	.word	0x08000b0b
 8000a84:	08000b0b 	.word	0x08000b0b
 8000a88:	08000b0b 	.word	0x08000b0b
 8000a8c:	08000b0b 	.word	0x08000b0b
 8000a90:	08000b0b 	.word	0x08000b0b
 8000a94:	08000b0b 	.word	0x08000b0b
 8000a98:	08000b0b 	.word	0x08000b0b
 8000a9c:	08000b0b 	.word	0x08000b0b
 8000aa0:	08000ab9 	.word	0x08000ab9
 8000aa4:	08000acd 	.word	0x08000acd
 8000aa8:	4a79      	ldr	r2, [pc, #484]	@ (8000c90 <HAL_GPIO_Init+0x2b4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d013      	beq.n	8000ad6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aae:	e02c      	b.n	8000b0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	623b      	str	r3, [r7, #32]
          break;
 8000ab6:	e029      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	3304      	adds	r3, #4
 8000abe:	623b      	str	r3, [r7, #32]
          break;
 8000ac0:	e024      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	3308      	adds	r3, #8
 8000ac8:	623b      	str	r3, [r7, #32]
          break;
 8000aca:	e01f      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	330c      	adds	r3, #12
 8000ad2:	623b      	str	r3, [r7, #32]
          break;
 8000ad4:	e01a      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e013      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d105      	bne.n	8000af8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aec:	2308      	movs	r3, #8
 8000aee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	69fa      	ldr	r2, [r7, #28]
 8000af4:	611a      	str	r2, [r3, #16]
          break;
 8000af6:	e009      	b.n	8000b0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af8:	2308      	movs	r3, #8
 8000afa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69fa      	ldr	r2, [r7, #28]
 8000b00:	615a      	str	r2, [r3, #20]
          break;
 8000b02:	e003      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
          break;
 8000b08:	e000      	b.n	8000b0c <HAL_GPIO_Init+0x130>
          break;
 8000b0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d801      	bhi.n	8000b16 <HAL_GPIO_Init+0x13a>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	e001      	b.n	8000b1a <HAL_GPIO_Init+0x13e>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	2bff      	cmp	r3, #255	@ 0xff
 8000b20:	d802      	bhi.n	8000b28 <HAL_GPIO_Init+0x14c>
 8000b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	e002      	b.n	8000b2e <HAL_GPIO_Init+0x152>
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	3b08      	subs	r3, #8
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	210f      	movs	r1, #15
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	401a      	ands	r2, r3
 8000b40:	6a39      	ldr	r1, [r7, #32]
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 80b1 	beq.w	8000cbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000c94 <HAL_GPIO_Init+0x2b8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a4c      	ldr	r2, [pc, #304]	@ (8000c94 <HAL_GPIO_Init+0x2b8>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b4a      	ldr	r3, [pc, #296]	@ (8000c94 <HAL_GPIO_Init+0x2b8>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b74:	4a48      	ldr	r2, [pc, #288]	@ (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	089b      	lsrs	r3, r3, #2
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a40      	ldr	r2, [pc, #256]	@ (8000c9c <HAL_GPIO_Init+0x2c0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d013      	beq.n	8000bc8 <HAL_GPIO_Init+0x1ec>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ca0 <HAL_GPIO_Init+0x2c4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d00d      	beq.n	8000bc4 <HAL_GPIO_Init+0x1e8>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a3e      	ldr	r2, [pc, #248]	@ (8000ca4 <HAL_GPIO_Init+0x2c8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d007      	beq.n	8000bc0 <HAL_GPIO_Init+0x1e4>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ca8 <HAL_GPIO_Init+0x2cc>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d101      	bne.n	8000bbc <HAL_GPIO_Init+0x1e0>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e006      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	e004      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e002      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bcc:	f002 0203 	and.w	r2, r2, #3
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	4093      	lsls	r3, r2
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bda:	492f      	ldr	r1, [pc, #188]	@ (8000c98 <HAL_GPIO_Init+0x2bc>)
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3302      	adds	r3, #2
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	492c      	ldr	r1, [pc, #176]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	608b      	str	r3, [r1, #8]
 8000c00:	e006      	b.n	8000c10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c02:	4b2a      	ldr	r3, [pc, #168]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4928      	ldr	r1, [pc, #160]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d006      	beq.n	8000c2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c1c:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	4922      	ldr	r1, [pc, #136]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60cb      	str	r3, [r1, #12]
 8000c28:	e006      	b.n	8000c38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c2c:	68da      	ldr	r2, [r3, #12]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	491e      	ldr	r1, [pc, #120]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c34:	4013      	ands	r3, r2
 8000c36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c44:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	4918      	ldr	r1, [pc, #96]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	604b      	str	r3, [r1, #4]
 8000c50:	e006      	b.n	8000c60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c52:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	4914      	ldr	r1, [pc, #80]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d021      	beq.n	8000cb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	490e      	ldr	r1, [pc, #56]	@ (8000cac <HAL_GPIO_Init+0x2d0>)
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	600b      	str	r3, [r1, #0]
 8000c78:	e021      	b.n	8000cbe <HAL_GPIO_Init+0x2e2>
 8000c7a:	bf00      	nop
 8000c7c:	10320000 	.word	0x10320000
 8000c80:	10310000 	.word	0x10310000
 8000c84:	10220000 	.word	0x10220000
 8000c88:	10210000 	.word	0x10210000
 8000c8c:	10120000 	.word	0x10120000
 8000c90:	10110000 	.word	0x10110000
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010000 	.word	0x40010000
 8000c9c:	40010800 	.word	0x40010800
 8000ca0:	40010c00 	.word	0x40010c00
 8000ca4:	40011000 	.word	0x40011000
 8000ca8:	40011400 	.word	0x40011400
 8000cac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <HAL_GPIO_Init+0x304>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	4909      	ldr	r1, [pc, #36]	@ (8000ce0 <HAL_GPIO_Init+0x304>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cca:	fa22 f303 	lsr.w	r3, r2, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f47f ae8e 	bne.w	80009f0 <HAL_GPIO_Init+0x14>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	372c      	adds	r7, #44	@ 0x2c
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40010400 	.word	0x40010400

08000ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf4:	787b      	ldrb	r3, [r7, #1]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cfa:	887a      	ldrh	r2, [r7, #2]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d00:	e003      	b.n	8000d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d02:	887b      	ldrh	r3, [r7, #2]
 8000d04:	041a      	lsls	r2, r3, #16
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	611a      	str	r2, [r3, #16]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e272      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 8087 	beq.w	8000e42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d34:	4b92      	ldr	r3, [pc, #584]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d00c      	beq.n	8000d5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d40:	4b8f      	ldr	r3, [pc, #572]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 030c 	and.w	r3, r3, #12
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d112      	bne.n	8000d72 <HAL_RCC_OscConfig+0x5e>
 8000d4c:	4b8c      	ldr	r3, [pc, #560]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d58:	d10b      	bne.n	8000d72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5a:	4b89      	ldr	r3, [pc, #548]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d06c      	beq.n	8000e40 <HAL_RCC_OscConfig+0x12c>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d168      	bne.n	8000e40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e24c      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d7a:	d106      	bne.n	8000d8a <HAL_RCC_OscConfig+0x76>
 8000d7c:	4b80      	ldr	r3, [pc, #512]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a7f      	ldr	r2, [pc, #508]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	e02e      	b.n	8000de8 <HAL_RCC_OscConfig+0xd4>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10c      	bne.n	8000dac <HAL_RCC_OscConfig+0x98>
 8000d92:	4b7b      	ldr	r3, [pc, #492]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a7a      	ldr	r2, [pc, #488]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	4b78      	ldr	r3, [pc, #480]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a77      	ldr	r2, [pc, #476]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e01d      	b.n	8000de8 <HAL_RCC_OscConfig+0xd4>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000db4:	d10c      	bne.n	8000dd0 <HAL_RCC_OscConfig+0xbc>
 8000db6:	4b72      	ldr	r3, [pc, #456]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a71      	ldr	r2, [pc, #452]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	4b6f      	ldr	r3, [pc, #444]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a6e      	ldr	r2, [pc, #440]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e00b      	b.n	8000de8 <HAL_RCC_OscConfig+0xd4>
 8000dd0:	4b6b      	ldr	r3, [pc, #428]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a6a      	ldr	r2, [pc, #424]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b68      	ldr	r3, [pc, #416]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a67      	ldr	r2, [pc, #412]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000de6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d013      	beq.n	8000e18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fce2 	bl	80007b8 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fcde 	bl	80007b8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	@ 0x64
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e200      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f0      	beq.n	8000df8 <HAL_RCC_OscConfig+0xe4>
 8000e16:	e014      	b.n	8000e42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fcce 	bl	80007b8 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e20:	f7ff fcca 	bl	80007b8 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b64      	cmp	r3, #100	@ 0x64
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e1ec      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e32:	4b53      	ldr	r3, [pc, #332]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f0      	bne.n	8000e20 <HAL_RCC_OscConfig+0x10c>
 8000e3e:	e000      	b.n	8000e42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d063      	beq.n	8000f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e4e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00b      	beq.n	8000e72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e5a:	4b49      	ldr	r3, [pc, #292]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d11c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x18c>
 8000e66:	4b46      	ldr	r3, [pc, #280]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d116      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e72:	4b43      	ldr	r3, [pc, #268]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d005      	beq.n	8000e8a <HAL_RCC_OscConfig+0x176>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d001      	beq.n	8000e8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e1c0      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	4939      	ldr	r1, [pc, #228]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9e:	e03a      	b.n	8000f16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d020      	beq.n	8000eea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ea8:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <HAL_RCC_OscConfig+0x270>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fc83 	bl	80007b8 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fc7f 	bl	80007b8 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e1a1      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4927      	ldr	r1, [pc, #156]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	600b      	str	r3, [r1, #0]
 8000ee8:	e015      	b.n	8000f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eea:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <HAL_RCC_OscConfig+0x270>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fc62 	bl	80007b8 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc5e 	bl	80007b8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e180      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f0      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d03a      	beq.n	8000f98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d019      	beq.n	8000f5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_RCC_OscConfig+0x274>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f30:	f7ff fc42 	bl	80007b8 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f38:	f7ff fc3e 	bl	80007b8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e160      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f000 face 	bl	80014f8 <RCC_Delay>
 8000f5c:	e01c      	b.n	8000f98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_RCC_OscConfig+0x274>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f64:	f7ff fc28 	bl	80007b8 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6a:	e00f      	b.n	8000f8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fc24 	bl	80007b8 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d908      	bls.n	8000f8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e146      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	42420000 	.word	0x42420000
 8000f88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8c:	4b92      	ldr	r3, [pc, #584]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1e9      	bne.n	8000f6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80a6 	beq.w	80010f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000faa:	4b8b      	ldr	r3, [pc, #556]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10d      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b88      	ldr	r3, [pc, #544]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a87      	ldr	r2, [pc, #540]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b85      	ldr	r3, [pc, #532]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd2:	4b82      	ldr	r3, [pc, #520]	@ (80011dc <HAL_RCC_OscConfig+0x4c8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d118      	bne.n	8001010 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fde:	4b7f      	ldr	r3, [pc, #508]	@ (80011dc <HAL_RCC_OscConfig+0x4c8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80011dc <HAL_RCC_OscConfig+0x4c8>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fbe5 	bl	80007b8 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff2:	f7ff fbe1 	bl	80007b8 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b64      	cmp	r3, #100	@ 0x64
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e103      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001004:	4b75      	ldr	r3, [pc, #468]	@ (80011dc <HAL_RCC_OscConfig+0x4c8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d106      	bne.n	8001026 <HAL_RCC_OscConfig+0x312>
 8001018:	4b6f      	ldr	r3, [pc, #444]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4a6e      	ldr	r2, [pc, #440]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6213      	str	r3, [r2, #32]
 8001024:	e02d      	b.n	8001082 <HAL_RCC_OscConfig+0x36e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x334>
 800102e:	4b6a      	ldr	r3, [pc, #424]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a69      	ldr	r2, [pc, #420]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	4b67      	ldr	r3, [pc, #412]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	4a66      	ldr	r2, [pc, #408]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	f023 0304 	bic.w	r3, r3, #4
 8001044:	6213      	str	r3, [r2, #32]
 8001046:	e01c      	b.n	8001082 <HAL_RCC_OscConfig+0x36e>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b05      	cmp	r3, #5
 800104e:	d10c      	bne.n	800106a <HAL_RCC_OscConfig+0x356>
 8001050:	4b61      	ldr	r3, [pc, #388]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a60      	ldr	r2, [pc, #384]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6213      	str	r3, [r2, #32]
 800105c:	4b5e      	ldr	r3, [pc, #376]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4a5d      	ldr	r2, [pc, #372]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6213      	str	r3, [r2, #32]
 8001068:	e00b      	b.n	8001082 <HAL_RCC_OscConfig+0x36e>
 800106a:	4b5b      	ldr	r3, [pc, #364]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a5a      	ldr	r2, [pc, #360]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b58      	ldr	r3, [pc, #352]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a57      	ldr	r2, [pc, #348]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d015      	beq.n	80010b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fb95 	bl	80007b8 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff fb91 	bl	80007b8 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e0b1      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a8:	4b4b      	ldr	r3, [pc, #300]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0ee      	beq.n	8001092 <HAL_RCC_OscConfig+0x37e>
 80010b4:	e014      	b.n	80010e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fb7f 	bl	80007b8 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010bc:	e00a      	b.n	80010d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010be:	f7ff fb7b 	bl	80007b8 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e09b      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d4:	4b40      	ldr	r3, [pc, #256]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1ee      	bne.n	80010be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d105      	bne.n	80010f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e6:	4b3c      	ldr	r3, [pc, #240]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a3b      	ldr	r2, [pc, #236]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8087 	beq.w	800120a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010fc:	4b36      	ldr	r3, [pc, #216]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b08      	cmp	r3, #8
 8001106:	d061      	beq.n	80011cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d146      	bne.n	800119e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001110:	4b33      	ldr	r3, [pc, #204]	@ (80011e0 <HAL_RCC_OscConfig+0x4cc>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fb4f 	bl	80007b8 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111e:	f7ff fb4b 	bl	80007b8 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e06d      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001130:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f0      	bne.n	800111e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001144:	d108      	bne.n	8001158 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001146:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	4921      	ldr	r1, [pc, #132]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001158:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a19      	ldr	r1, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001168:	430b      	orrs	r3, r1
 800116a:	491b      	ldr	r1, [pc, #108]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <HAL_RCC_OscConfig+0x4cc>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001176:	f7ff fb1f 	bl	80007b8 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117e:	f7ff fb1b 	bl	80007b8 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e03d      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f0      	beq.n	800117e <HAL_RCC_OscConfig+0x46a>
 800119c:	e035      	b.n	800120a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <HAL_RCC_OscConfig+0x4cc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fb08 	bl	80007b8 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ac:	f7ff fb04 	bl	80007b8 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e026      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x498>
 80011ca:	e01e      	b.n	800120a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d107      	bne.n	80011e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e019      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40007000 	.word	0x40007000
 80011e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_RCC_OscConfig+0x500>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001202:	429a      	cmp	r2, r3
 8001204:	d001      	beq.n	800120a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0d0      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800122c:	4b6a      	ldr	r3, [pc, #424]	@ (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d910      	bls.n	800125c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	4b67      	ldr	r3, [pc, #412]	@ (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 0207 	bic.w	r2, r3, #7
 8001242:	4965      	ldr	r1, [pc, #404]	@ (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b63      	ldr	r3, [pc, #396]	@ (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0b8      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d020      	beq.n	80012aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001274:	4b59      	ldr	r3, [pc, #356]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a58      	ldr	r2, [pc, #352]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800127e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128c:	4b53      	ldr	r3, [pc, #332]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a52      	ldr	r2, [pc, #328]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001296:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001298:	4b50      	ldr	r3, [pc, #320]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	494d      	ldr	r1, [pc, #308]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d040      	beq.n	8001338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d107      	bne.n	80012ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b47      	ldr	r3, [pc, #284]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d115      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e07f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d107      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d6:	4b41      	ldr	r3, [pc, #260]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d109      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e073      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e6:	4b3d      	ldr	r3, [pc, #244]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e06b      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f6:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f023 0203 	bic.w	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4936      	ldr	r1, [pc, #216]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001308:	f7ff fa56 	bl	80007b8 <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130e:	e00a      	b.n	8001326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001310:	f7ff fa52 	bl	80007b8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800131e:	4293      	cmp	r3, r2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e053      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 020c 	and.w	r2, r3, #12
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	429a      	cmp	r2, r3
 8001336:	d1eb      	bne.n	8001310 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001338:	4b27      	ldr	r3, [pc, #156]	@ (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d210      	bcs.n	8001368 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001346:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 0207 	bic.w	r2, r3, #7
 800134e:	4922      	ldr	r1, [pc, #136]	@ (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e032      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	4916      	ldr	r1, [pc, #88]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	490e      	ldr	r1, [pc, #56]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013a6:	f000 f821 	bl	80013ec <HAL_RCC_GetSysClockFreq>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	490a      	ldr	r1, [pc, #40]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c8>)
 80013b8:	5ccb      	ldrb	r3, [r1, r3]
 80013ba:	fa22 f303 	lsr.w	r3, r2, r3
 80013be:	4a09      	ldr	r2, [pc, #36]	@ (80013e4 <HAL_RCC_ClockConfig+0x1cc>)
 80013c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <HAL_RCC_ClockConfig+0x1d0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f9b4 	bl	8000734 <HAL_InitTick>

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40022000 	.word	0x40022000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	08002368 	.word	0x08002368
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001406:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <HAL_RCC_GetSysClockFreq+0x94>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b04      	cmp	r3, #4
 8001414:	d002      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x30>
 8001416:	2b08      	cmp	r3, #8
 8001418:	d003      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0x36>
 800141a:	e027      	b.n	800146c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_RCC_GetSysClockFreq+0x98>)
 800141e:	613b      	str	r3, [r7, #16]
      break;
 8001420:	e027      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	0c9b      	lsrs	r3, r3, #18
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <HAL_RCC_GetSysClockFreq+0x9c>)
 800142c:	5cd3      	ldrb	r3, [r2, r3]
 800142e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d010      	beq.n	800145c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <HAL_RCC_GetSysClockFreq+0x94>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	0c5b      	lsrs	r3, r3, #17
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	4a11      	ldr	r2, [pc, #68]	@ (800148c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <HAL_RCC_GetSysClockFreq+0x98>)
 800144e:	fb03 f202 	mul.w	r2, r3, r2
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	fbb2 f3f3 	udiv	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e004      	b.n	8001466 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a0c      	ldr	r2, [pc, #48]	@ (8001490 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	613b      	str	r3, [r7, #16]
      break;
 800146a:	e002      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <HAL_RCC_GetSysClockFreq+0x98>)
 800146e:	613b      	str	r3, [r7, #16]
      break;
 8001470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001472:	693b      	ldr	r3, [r7, #16]
}
 8001474:	4618      	mov	r0, r3
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	007a1200 	.word	0x007a1200
 8001488:	08002380 	.word	0x08002380
 800148c:	08002390 	.word	0x08002390
 8001490:	003d0900 	.word	0x003d0900

08001494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001498:	4b02      	ldr	r3, [pc, #8]	@ (80014a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000000 	.word	0x20000000

080014a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014ac:	f7ff fff2 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	4903      	ldr	r1, [pc, #12]	@ (80014cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014be:	5ccb      	ldrb	r3, [r1, r3]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08002378 	.word	0x08002378

080014d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014d4:	f7ff ffde 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	0adb      	lsrs	r3, r3, #11
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	4903      	ldr	r1, [pc, #12]	@ (80014f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014e6:	5ccb      	ldrb	r3, [r1, r3]
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	08002378 	.word	0x08002378

080014f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001500:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <RCC_Delay+0x34>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <RCC_Delay+0x38>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0a5b      	lsrs	r3, r3, #9
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001514:	bf00      	nop
  }
  while (Delay --);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1e5a      	subs	r2, r3, #1
 800151a:	60fa      	str	r2, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f9      	bne.n	8001514 <RCC_Delay+0x1c>
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	20000000 	.word	0x20000000
 8001530:	10624dd3 	.word	0x10624dd3

08001534 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e076      	b.n	8001634 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	2b00      	cmp	r3, #0
 800154c:	d108      	bne.n	8001560 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001556:	d009      	beq.n	800156c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
 800155e:	e005      	b.n	800156c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7fe ff4c 	bl	8000424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015f0:	ea42 0103 	orr.w	r1, r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	0c1a      	lsrs	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f002 0204 	and.w	r2, r2, #4
 8001612:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001622:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e042      	b.n	80016d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d106      	bne.n	8001668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7fe ff28 	bl	80004b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2224      	movs	r2, #36	@ 0x24
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800167e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f91d 	bl	80018c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80016a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d16d      	bne.n	80017d8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <HAL_UART_Transmit+0x2c>
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e066      	b.n	80017da <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2221      	movs	r2, #33	@ 0x21
 8001716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800171a:	f7ff f84d 	bl	80007b8 <HAL_GetTick>
 800171e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	88fa      	ldrh	r2, [r7, #6]
 8001724:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	88fa      	ldrh	r2, [r7, #6]
 800172a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001734:	d108      	bne.n	8001748 <HAL_UART_Transmit+0x6c>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d104      	bne.n	8001748 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	e003      	b.n	8001750 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001750:	e02a      	b.n	80017a8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2200      	movs	r2, #0
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 f840 	bl	80017e2 <UART_WaitOnFlagUntilTimeout>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e036      	b.n	80017da <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10b      	bne.n	800178a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	3302      	adds	r3, #2
 8001786:	61bb      	str	r3, [r7, #24]
 8001788:	e007      	b.n	800179a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	781a      	ldrb	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3301      	adds	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1cf      	bne.n	8001752 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2200      	movs	r2, #0
 80017ba:	2140      	movs	r1, #64	@ 0x40
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 f810 	bl	80017e2 <UART_WaitOnFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e006      	b.n	80017da <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e000      	b.n	80017da <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80017d8:	2302      	movs	r3, #2
  }
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b090      	sub	sp, #64	@ 0x40
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4613      	mov	r3, r2
 80017f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017f2:	e050      	b.n	8001896 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fa:	d04c      	beq.n	8001896 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <UART_WaitOnFlagUntilTimeout+0x30>
 8001802:	f7fe ffd9 	bl	80007b8 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800180e:	429a      	cmp	r2, r3
 8001810:	d241      	bcs.n	8001896 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	330c      	adds	r3, #12
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800181a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181c:	e853 3f00 	ldrex	r3, [r3]
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	330c      	adds	r3, #12
 8001830:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001832:	637a      	str	r2, [r7, #52]	@ 0x34
 8001834:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001836:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001838:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800183a:	e841 2300 	strex	r3, r2, [r1]
 800183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e5      	bne.n	8001812 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3314      	adds	r3, #20
 800184c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	e853 3f00 	ldrex	r3, [r3]
 8001854:	613b      	str	r3, [r7, #16]
   return(result);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3314      	adds	r3, #20
 8001864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001866:	623a      	str	r2, [r7, #32]
 8001868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800186a:	69f9      	ldr	r1, [r7, #28]
 800186c:	6a3a      	ldr	r2, [r7, #32]
 800186e:	e841 2300 	strex	r3, r2, [r1]
 8001872:	61bb      	str	r3, [r7, #24]
   return(result);
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1e5      	bne.n	8001846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2220      	movs	r2, #32
 800187e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2220      	movs	r2, #32
 8001886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e00f      	b.n	80018b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4013      	ands	r3, r2
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	bf0c      	ite	eq
 80018a6:	2301      	moveq	r3, #1
 80018a8:	2300      	movne	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d09f      	beq.n	80017f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3740      	adds	r7, #64	@ 0x40
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80018fa:	f023 030c 	bic.w	r3, r3, #12
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	430b      	orrs	r3, r1
 8001906:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2c      	ldr	r2, [pc, #176]	@ (80019d4 <UART_SetConfig+0x114>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d103      	bne.n	8001930 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001928:	f7ff fdd2 	bl	80014d0 <HAL_RCC_GetPCLK2Freq>
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	e002      	b.n	8001936 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001930:	f7ff fdba 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001934:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	009a      	lsls	r2, r3, #2
 8001940:	441a      	add	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	4a22      	ldr	r2, [pc, #136]	@ (80019d8 <UART_SetConfig+0x118>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	0119      	lsls	r1, r3, #4
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	009a      	lsls	r2, r3, #2
 8001960:	441a      	add	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	fbb2 f2f3 	udiv	r2, r2, r3
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <UART_SetConfig+0x118>)
 800196e:	fba3 0302 	umull	r0, r3, r3, r2
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2064      	movs	r0, #100	@ 0x64
 8001976:	fb00 f303 	mul.w	r3, r0, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	3332      	adds	r3, #50	@ 0x32
 8001980:	4a15      	ldr	r2, [pc, #84]	@ (80019d8 <UART_SetConfig+0x118>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800198c:	4419      	add	r1, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009a      	lsls	r2, r3, #2
 8001998:	441a      	add	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <UART_SetConfig+0x118>)
 80019a6:	fba3 0302 	umull	r0, r3, r3, r2
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2064      	movs	r0, #100	@ 0x64
 80019ae:	fb00 f303 	mul.w	r3, r0, r3
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	3332      	adds	r3, #50	@ 0x32
 80019b8:	4a07      	ldr	r2, [pc, #28]	@ (80019d8 <UART_SetConfig+0x118>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	f003 020f 	and.w	r2, r3, #15
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	440a      	add	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40013800 	.word	0x40013800
 80019d8:	51eb851f 	.word	0x51eb851f

080019dc <std>:
 80019dc:	2300      	movs	r3, #0
 80019de:	b510      	push	{r4, lr}
 80019e0:	4604      	mov	r4, r0
 80019e2:	e9c0 3300 	strd	r3, r3, [r0]
 80019e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019ea:	6083      	str	r3, [r0, #8]
 80019ec:	8181      	strh	r1, [r0, #12]
 80019ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80019f0:	81c2      	strh	r2, [r0, #14]
 80019f2:	6183      	str	r3, [r0, #24]
 80019f4:	4619      	mov	r1, r3
 80019f6:	2208      	movs	r2, #8
 80019f8:	305c      	adds	r0, #92	@ 0x5c
 80019fa:	f000 f9e7 	bl	8001dcc <memset>
 80019fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <std+0x58>)
 8001a00:	6224      	str	r4, [r4, #32]
 8001a02:	6263      	str	r3, [r4, #36]	@ 0x24
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <std+0x5c>)
 8001a06:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <std+0x60>)
 8001a0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <std+0x64>)
 8001a0e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <std+0x68>)
 8001a12:	429c      	cmp	r4, r3
 8001a14:	d006      	beq.n	8001a24 <std+0x48>
 8001a16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a1a:	4294      	cmp	r4, r2
 8001a1c:	d002      	beq.n	8001a24 <std+0x48>
 8001a1e:	33d0      	adds	r3, #208	@ 0xd0
 8001a20:	429c      	cmp	r4, r3
 8001a22:	d105      	bne.n	8001a30 <std+0x54>
 8001a24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a2c:	f000 ba46 	b.w	8001ebc <__retarget_lock_init_recursive>
 8001a30:	bd10      	pop	{r4, pc}
 8001a32:	bf00      	nop
 8001a34:	08001c1d 	.word	0x08001c1d
 8001a38:	08001c3f 	.word	0x08001c3f
 8001a3c:	08001c77 	.word	0x08001c77
 8001a40:	08001c9b 	.word	0x08001c9b
 8001a44:	2000012c 	.word	0x2000012c

08001a48 <stdio_exit_handler>:
 8001a48:	4a02      	ldr	r2, [pc, #8]	@ (8001a54 <stdio_exit_handler+0xc>)
 8001a4a:	4903      	ldr	r1, [pc, #12]	@ (8001a58 <stdio_exit_handler+0x10>)
 8001a4c:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <stdio_exit_handler+0x14>)
 8001a4e:	f000 b869 	b.w	8001b24 <_fwalk_sglue>
 8001a52:	bf00      	nop
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	080021b1 	.word	0x080021b1
 8001a5c:	2000001c 	.word	0x2000001c

08001a60 <cleanup_stdio>:
 8001a60:	6841      	ldr	r1, [r0, #4]
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <cleanup_stdio+0x34>)
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4299      	cmp	r1, r3
 8001a68:	4604      	mov	r4, r0
 8001a6a:	d001      	beq.n	8001a70 <cleanup_stdio+0x10>
 8001a6c:	f000 fba0 	bl	80021b0 <_fflush_r>
 8001a70:	68a1      	ldr	r1, [r4, #8]
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <cleanup_stdio+0x38>)
 8001a74:	4299      	cmp	r1, r3
 8001a76:	d002      	beq.n	8001a7e <cleanup_stdio+0x1e>
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f000 fb99 	bl	80021b0 <_fflush_r>
 8001a7e:	68e1      	ldr	r1, [r4, #12]
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <cleanup_stdio+0x3c>)
 8001a82:	4299      	cmp	r1, r3
 8001a84:	d004      	beq.n	8001a90 <cleanup_stdio+0x30>
 8001a86:	4620      	mov	r0, r4
 8001a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a8c:	f000 bb90 	b.w	80021b0 <_fflush_r>
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	bf00      	nop
 8001a94:	2000012c 	.word	0x2000012c
 8001a98:	20000194 	.word	0x20000194
 8001a9c:	200001fc 	.word	0x200001fc

08001aa0 <global_stdio_init.part.0>:
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <global_stdio_init.part.0+0x30>)
 8001aa4:	4c0b      	ldr	r4, [pc, #44]	@ (8001ad4 <global_stdio_init.part.0+0x34>)
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad8 <global_stdio_init.part.0+0x38>)
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	2104      	movs	r1, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f7ff ff94 	bl	80019dc <std>
 8001ab4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2109      	movs	r1, #9
 8001abc:	f7ff ff8e 	bl	80019dc <std>
 8001ac0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aca:	2112      	movs	r1, #18
 8001acc:	f7ff bf86 	b.w	80019dc <std>
 8001ad0:	20000264 	.word	0x20000264
 8001ad4:	2000012c 	.word	0x2000012c
 8001ad8:	08001a49 	.word	0x08001a49

08001adc <__sfp_lock_acquire>:
 8001adc:	4801      	ldr	r0, [pc, #4]	@ (8001ae4 <__sfp_lock_acquire+0x8>)
 8001ade:	f000 b9ee 	b.w	8001ebe <__retarget_lock_acquire_recursive>
 8001ae2:	bf00      	nop
 8001ae4:	2000026d 	.word	0x2000026d

08001ae8 <__sfp_lock_release>:
 8001ae8:	4801      	ldr	r0, [pc, #4]	@ (8001af0 <__sfp_lock_release+0x8>)
 8001aea:	f000 b9e9 	b.w	8001ec0 <__retarget_lock_release_recursive>
 8001aee:	bf00      	nop
 8001af0:	2000026d 	.word	0x2000026d

08001af4 <__sinit>:
 8001af4:	b510      	push	{r4, lr}
 8001af6:	4604      	mov	r4, r0
 8001af8:	f7ff fff0 	bl	8001adc <__sfp_lock_acquire>
 8001afc:	6a23      	ldr	r3, [r4, #32]
 8001afe:	b11b      	cbz	r3, 8001b08 <__sinit+0x14>
 8001b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b04:	f7ff bff0 	b.w	8001ae8 <__sfp_lock_release>
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <__sinit+0x28>)
 8001b0a:	6223      	str	r3, [r4, #32]
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <__sinit+0x2c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f5      	bne.n	8001b00 <__sinit+0xc>
 8001b14:	f7ff ffc4 	bl	8001aa0 <global_stdio_init.part.0>
 8001b18:	e7f2      	b.n	8001b00 <__sinit+0xc>
 8001b1a:	bf00      	nop
 8001b1c:	08001a61 	.word	0x08001a61
 8001b20:	20000264 	.word	0x20000264

08001b24 <_fwalk_sglue>:
 8001b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b28:	4607      	mov	r7, r0
 8001b2a:	4688      	mov	r8, r1
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	2600      	movs	r6, #0
 8001b30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b34:	f1b9 0901 	subs.w	r9, r9, #1
 8001b38:	d505      	bpl.n	8001b46 <_fwalk_sglue+0x22>
 8001b3a:	6824      	ldr	r4, [r4, #0]
 8001b3c:	2c00      	cmp	r4, #0
 8001b3e:	d1f7      	bne.n	8001b30 <_fwalk_sglue+0xc>
 8001b40:	4630      	mov	r0, r6
 8001b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b46:	89ab      	ldrh	r3, [r5, #12]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d907      	bls.n	8001b5c <_fwalk_sglue+0x38>
 8001b4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b50:	3301      	adds	r3, #1
 8001b52:	d003      	beq.n	8001b5c <_fwalk_sglue+0x38>
 8001b54:	4629      	mov	r1, r5
 8001b56:	4638      	mov	r0, r7
 8001b58:	47c0      	blx	r8
 8001b5a:	4306      	orrs	r6, r0
 8001b5c:	3568      	adds	r5, #104	@ 0x68
 8001b5e:	e7e9      	b.n	8001b34 <_fwalk_sglue+0x10>

08001b60 <_puts_r>:
 8001b60:	6a03      	ldr	r3, [r0, #32]
 8001b62:	b570      	push	{r4, r5, r6, lr}
 8001b64:	4605      	mov	r5, r0
 8001b66:	460e      	mov	r6, r1
 8001b68:	6884      	ldr	r4, [r0, #8]
 8001b6a:	b90b      	cbnz	r3, 8001b70 <_puts_r+0x10>
 8001b6c:	f7ff ffc2 	bl	8001af4 <__sinit>
 8001b70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b72:	07db      	lsls	r3, r3, #31
 8001b74:	d405      	bmi.n	8001b82 <_puts_r+0x22>
 8001b76:	89a3      	ldrh	r3, [r4, #12]
 8001b78:	0598      	lsls	r0, r3, #22
 8001b7a:	d402      	bmi.n	8001b82 <_puts_r+0x22>
 8001b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b7e:	f000 f99e 	bl	8001ebe <__retarget_lock_acquire_recursive>
 8001b82:	89a3      	ldrh	r3, [r4, #12]
 8001b84:	0719      	lsls	r1, r3, #28
 8001b86:	d502      	bpl.n	8001b8e <_puts_r+0x2e>
 8001b88:	6923      	ldr	r3, [r4, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d135      	bne.n	8001bfa <_puts_r+0x9a>
 8001b8e:	4621      	mov	r1, r4
 8001b90:	4628      	mov	r0, r5
 8001b92:	f000 f8c5 	bl	8001d20 <__swsetup_r>
 8001b96:	b380      	cbz	r0, 8001bfa <_puts_r+0x9a>
 8001b98:	f04f 35ff 	mov.w	r5, #4294967295
 8001b9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b9e:	07da      	lsls	r2, r3, #31
 8001ba0:	d405      	bmi.n	8001bae <_puts_r+0x4e>
 8001ba2:	89a3      	ldrh	r3, [r4, #12]
 8001ba4:	059b      	lsls	r3, r3, #22
 8001ba6:	d402      	bmi.n	8001bae <_puts_r+0x4e>
 8001ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001baa:	f000 f989 	bl	8001ec0 <__retarget_lock_release_recursive>
 8001bae:	4628      	mov	r0, r5
 8001bb0:	bd70      	pop	{r4, r5, r6, pc}
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da04      	bge.n	8001bc0 <_puts_r+0x60>
 8001bb6:	69a2      	ldr	r2, [r4, #24]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dc17      	bgt.n	8001bec <_puts_r+0x8c>
 8001bbc:	290a      	cmp	r1, #10
 8001bbe:	d015      	beq.n	8001bec <_puts_r+0x8c>
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	6022      	str	r2, [r4, #0]
 8001bc6:	7019      	strb	r1, [r3, #0]
 8001bc8:	68a3      	ldr	r3, [r4, #8]
 8001bca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	60a3      	str	r3, [r4, #8]
 8001bd2:	2900      	cmp	r1, #0
 8001bd4:	d1ed      	bne.n	8001bb2 <_puts_r+0x52>
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da11      	bge.n	8001bfe <_puts_r+0x9e>
 8001bda:	4622      	mov	r2, r4
 8001bdc:	210a      	movs	r1, #10
 8001bde:	4628      	mov	r0, r5
 8001be0:	f000 f85f 	bl	8001ca2 <__swbuf_r>
 8001be4:	3001      	adds	r0, #1
 8001be6:	d0d7      	beq.n	8001b98 <_puts_r+0x38>
 8001be8:	250a      	movs	r5, #10
 8001bea:	e7d7      	b.n	8001b9c <_puts_r+0x3c>
 8001bec:	4622      	mov	r2, r4
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f000 f857 	bl	8001ca2 <__swbuf_r>
 8001bf4:	3001      	adds	r0, #1
 8001bf6:	d1e7      	bne.n	8001bc8 <_puts_r+0x68>
 8001bf8:	e7ce      	b.n	8001b98 <_puts_r+0x38>
 8001bfa:	3e01      	subs	r6, #1
 8001bfc:	e7e4      	b.n	8001bc8 <_puts_r+0x68>
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	6022      	str	r2, [r4, #0]
 8001c04:	220a      	movs	r2, #10
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e7ee      	b.n	8001be8 <_puts_r+0x88>
	...

08001c0c <puts>:
 8001c0c:	4b02      	ldr	r3, [pc, #8]	@ (8001c18 <puts+0xc>)
 8001c0e:	4601      	mov	r1, r0
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	f7ff bfa5 	b.w	8001b60 <_puts_r>
 8001c16:	bf00      	nop
 8001c18:	20000018 	.word	0x20000018

08001c1c <__sread>:
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	460c      	mov	r4, r1
 8001c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c24:	f000 f8fc 	bl	8001e20 <_read_r>
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	bfab      	itete	ge
 8001c2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8001c30:	181b      	addge	r3, r3, r0
 8001c32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001c36:	bfac      	ite	ge
 8001c38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001c3a:	81a3      	strhlt	r3, [r4, #12]
 8001c3c:	bd10      	pop	{r4, pc}

08001c3e <__swrite>:
 8001c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c42:	461f      	mov	r7, r3
 8001c44:	898b      	ldrh	r3, [r1, #12]
 8001c46:	4605      	mov	r5, r0
 8001c48:	05db      	lsls	r3, r3, #23
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	4616      	mov	r6, r2
 8001c4e:	d505      	bpl.n	8001c5c <__swrite+0x1e>
 8001c50:	2302      	movs	r3, #2
 8001c52:	2200      	movs	r2, #0
 8001c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c58:	f000 f8d0 	bl	8001dfc <_lseek_r>
 8001c5c:	89a3      	ldrh	r3, [r4, #12]
 8001c5e:	4632      	mov	r2, r6
 8001c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c64:	81a3      	strh	r3, [r4, #12]
 8001c66:	4628      	mov	r0, r5
 8001c68:	463b      	mov	r3, r7
 8001c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c72:	f000 b8e7 	b.w	8001e44 <_write_r>

08001c76 <__sseek>:
 8001c76:	b510      	push	{r4, lr}
 8001c78:	460c      	mov	r4, r1
 8001c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c7e:	f000 f8bd 	bl	8001dfc <_lseek_r>
 8001c82:	1c43      	adds	r3, r0, #1
 8001c84:	89a3      	ldrh	r3, [r4, #12]
 8001c86:	bf15      	itete	ne
 8001c88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001c8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001c8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001c92:	81a3      	strheq	r3, [r4, #12]
 8001c94:	bf18      	it	ne
 8001c96:	81a3      	strhne	r3, [r4, #12]
 8001c98:	bd10      	pop	{r4, pc}

08001c9a <__sclose>:
 8001c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c9e:	f000 b89d 	b.w	8001ddc <_close_r>

08001ca2 <__swbuf_r>:
 8001ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca4:	460e      	mov	r6, r1
 8001ca6:	4614      	mov	r4, r2
 8001ca8:	4605      	mov	r5, r0
 8001caa:	b118      	cbz	r0, 8001cb4 <__swbuf_r+0x12>
 8001cac:	6a03      	ldr	r3, [r0, #32]
 8001cae:	b90b      	cbnz	r3, 8001cb4 <__swbuf_r+0x12>
 8001cb0:	f7ff ff20 	bl	8001af4 <__sinit>
 8001cb4:	69a3      	ldr	r3, [r4, #24]
 8001cb6:	60a3      	str	r3, [r4, #8]
 8001cb8:	89a3      	ldrh	r3, [r4, #12]
 8001cba:	071a      	lsls	r2, r3, #28
 8001cbc:	d501      	bpl.n	8001cc2 <__swbuf_r+0x20>
 8001cbe:	6923      	ldr	r3, [r4, #16]
 8001cc0:	b943      	cbnz	r3, 8001cd4 <__swbuf_r+0x32>
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	4628      	mov	r0, r5
 8001cc6:	f000 f82b 	bl	8001d20 <__swsetup_r>
 8001cca:	b118      	cbz	r0, 8001cd4 <__swbuf_r+0x32>
 8001ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8001cd0:	4638      	mov	r0, r7
 8001cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	6922      	ldr	r2, [r4, #16]
 8001cd8:	b2f6      	uxtb	r6, r6
 8001cda:	1a98      	subs	r0, r3, r2
 8001cdc:	6963      	ldr	r3, [r4, #20]
 8001cde:	4637      	mov	r7, r6
 8001ce0:	4283      	cmp	r3, r0
 8001ce2:	dc05      	bgt.n	8001cf0 <__swbuf_r+0x4e>
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	4628      	mov	r0, r5
 8001ce8:	f000 fa62 	bl	80021b0 <_fflush_r>
 8001cec:	2800      	cmp	r0, #0
 8001cee:	d1ed      	bne.n	8001ccc <__swbuf_r+0x2a>
 8001cf0:	68a3      	ldr	r3, [r4, #8]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	60a3      	str	r3, [r4, #8]
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	6022      	str	r2, [r4, #0]
 8001cfc:	701e      	strb	r6, [r3, #0]
 8001cfe:	6962      	ldr	r2, [r4, #20]
 8001d00:	1c43      	adds	r3, r0, #1
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d004      	beq.n	8001d10 <__swbuf_r+0x6e>
 8001d06:	89a3      	ldrh	r3, [r4, #12]
 8001d08:	07db      	lsls	r3, r3, #31
 8001d0a:	d5e1      	bpl.n	8001cd0 <__swbuf_r+0x2e>
 8001d0c:	2e0a      	cmp	r6, #10
 8001d0e:	d1df      	bne.n	8001cd0 <__swbuf_r+0x2e>
 8001d10:	4621      	mov	r1, r4
 8001d12:	4628      	mov	r0, r5
 8001d14:	f000 fa4c 	bl	80021b0 <_fflush_r>
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d0d9      	beq.n	8001cd0 <__swbuf_r+0x2e>
 8001d1c:	e7d6      	b.n	8001ccc <__swbuf_r+0x2a>
	...

08001d20 <__swsetup_r>:
 8001d20:	b538      	push	{r3, r4, r5, lr}
 8001d22:	4b29      	ldr	r3, [pc, #164]	@ (8001dc8 <__swsetup_r+0xa8>)
 8001d24:	4605      	mov	r5, r0
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	460c      	mov	r4, r1
 8001d2a:	b118      	cbz	r0, 8001d34 <__swsetup_r+0x14>
 8001d2c:	6a03      	ldr	r3, [r0, #32]
 8001d2e:	b90b      	cbnz	r3, 8001d34 <__swsetup_r+0x14>
 8001d30:	f7ff fee0 	bl	8001af4 <__sinit>
 8001d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d38:	0719      	lsls	r1, r3, #28
 8001d3a:	d422      	bmi.n	8001d82 <__swsetup_r+0x62>
 8001d3c:	06da      	lsls	r2, r3, #27
 8001d3e:	d407      	bmi.n	8001d50 <__swsetup_r+0x30>
 8001d40:	2209      	movs	r2, #9
 8001d42:	602a      	str	r2, [r5, #0]
 8001d44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	81a3      	strh	r3, [r4, #12]
 8001d4e:	e033      	b.n	8001db8 <__swsetup_r+0x98>
 8001d50:	0758      	lsls	r0, r3, #29
 8001d52:	d512      	bpl.n	8001d7a <__swsetup_r+0x5a>
 8001d54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d56:	b141      	cbz	r1, 8001d6a <__swsetup_r+0x4a>
 8001d58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d5c:	4299      	cmp	r1, r3
 8001d5e:	d002      	beq.n	8001d66 <__swsetup_r+0x46>
 8001d60:	4628      	mov	r0, r5
 8001d62:	f000 f8af 	bl	8001ec4 <_free_r>
 8001d66:	2300      	movs	r3, #0
 8001d68:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d6a:	89a3      	ldrh	r3, [r4, #12]
 8001d6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001d70:	81a3      	strh	r3, [r4, #12]
 8001d72:	2300      	movs	r3, #0
 8001d74:	6063      	str	r3, [r4, #4]
 8001d76:	6923      	ldr	r3, [r4, #16]
 8001d78:	6023      	str	r3, [r4, #0]
 8001d7a:	89a3      	ldrh	r3, [r4, #12]
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	81a3      	strh	r3, [r4, #12]
 8001d82:	6923      	ldr	r3, [r4, #16]
 8001d84:	b94b      	cbnz	r3, 8001d9a <__swsetup_r+0x7a>
 8001d86:	89a3      	ldrh	r3, [r4, #12]
 8001d88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d90:	d003      	beq.n	8001d9a <__swsetup_r+0x7a>
 8001d92:	4621      	mov	r1, r4
 8001d94:	4628      	mov	r0, r5
 8001d96:	f000 fa58 	bl	800224a <__smakebuf_r>
 8001d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d9e:	f013 0201 	ands.w	r2, r3, #1
 8001da2:	d00a      	beq.n	8001dba <__swsetup_r+0x9a>
 8001da4:	2200      	movs	r2, #0
 8001da6:	60a2      	str	r2, [r4, #8]
 8001da8:	6962      	ldr	r2, [r4, #20]
 8001daa:	4252      	negs	r2, r2
 8001dac:	61a2      	str	r2, [r4, #24]
 8001dae:	6922      	ldr	r2, [r4, #16]
 8001db0:	b942      	cbnz	r2, 8001dc4 <__swsetup_r+0xa4>
 8001db2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001db6:	d1c5      	bne.n	8001d44 <__swsetup_r+0x24>
 8001db8:	bd38      	pop	{r3, r4, r5, pc}
 8001dba:	0799      	lsls	r1, r3, #30
 8001dbc:	bf58      	it	pl
 8001dbe:	6962      	ldrpl	r2, [r4, #20]
 8001dc0:	60a2      	str	r2, [r4, #8]
 8001dc2:	e7f4      	b.n	8001dae <__swsetup_r+0x8e>
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e7f7      	b.n	8001db8 <__swsetup_r+0x98>
 8001dc8:	20000018 	.word	0x20000018

08001dcc <memset>:
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4402      	add	r2, r0
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <memset+0xa>
 8001dd4:	4770      	bx	lr
 8001dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dda:	e7f9      	b.n	8001dd0 <memset+0x4>

08001ddc <_close_r>:
 8001ddc:	b538      	push	{r3, r4, r5, lr}
 8001dde:	2300      	movs	r3, #0
 8001de0:	4d05      	ldr	r5, [pc, #20]	@ (8001df8 <_close_r+0x1c>)
 8001de2:	4604      	mov	r4, r0
 8001de4:	4608      	mov	r0, r1
 8001de6:	602b      	str	r3, [r5, #0]
 8001de8:	f7fe fbfb 	bl	80005e2 <_close>
 8001dec:	1c43      	adds	r3, r0, #1
 8001dee:	d102      	bne.n	8001df6 <_close_r+0x1a>
 8001df0:	682b      	ldr	r3, [r5, #0]
 8001df2:	b103      	cbz	r3, 8001df6 <_close_r+0x1a>
 8001df4:	6023      	str	r3, [r4, #0]
 8001df6:	bd38      	pop	{r3, r4, r5, pc}
 8001df8:	20000268 	.word	0x20000268

08001dfc <_lseek_r>:
 8001dfc:	b538      	push	{r3, r4, r5, lr}
 8001dfe:	4604      	mov	r4, r0
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	2200      	movs	r2, #0
 8001e06:	4d05      	ldr	r5, [pc, #20]	@ (8001e1c <_lseek_r+0x20>)
 8001e08:	602a      	str	r2, [r5, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f7fe fc0d 	bl	800062a <_lseek>
 8001e10:	1c43      	adds	r3, r0, #1
 8001e12:	d102      	bne.n	8001e1a <_lseek_r+0x1e>
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	b103      	cbz	r3, 8001e1a <_lseek_r+0x1e>
 8001e18:	6023      	str	r3, [r4, #0]
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}
 8001e1c:	20000268 	.word	0x20000268

08001e20 <_read_r>:
 8001e20:	b538      	push	{r3, r4, r5, lr}
 8001e22:	4604      	mov	r4, r0
 8001e24:	4608      	mov	r0, r1
 8001e26:	4611      	mov	r1, r2
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4d05      	ldr	r5, [pc, #20]	@ (8001e40 <_read_r+0x20>)
 8001e2c:	602a      	str	r2, [r5, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f7fe fbba 	bl	80005a8 <_read>
 8001e34:	1c43      	adds	r3, r0, #1
 8001e36:	d102      	bne.n	8001e3e <_read_r+0x1e>
 8001e38:	682b      	ldr	r3, [r5, #0]
 8001e3a:	b103      	cbz	r3, 8001e3e <_read_r+0x1e>
 8001e3c:	6023      	str	r3, [r4, #0]
 8001e3e:	bd38      	pop	{r3, r4, r5, pc}
 8001e40:	20000268 	.word	0x20000268

08001e44 <_write_r>:
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4604      	mov	r4, r0
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4d05      	ldr	r5, [pc, #20]	@ (8001e64 <_write_r+0x20>)
 8001e50:	602a      	str	r2, [r5, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f7fe f97a 	bl	800014c <_write>
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d102      	bne.n	8001e62 <_write_r+0x1e>
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	b103      	cbz	r3, 8001e62 <_write_r+0x1e>
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	20000268 	.word	0x20000268

08001e68 <__errno>:
 8001e68:	4b01      	ldr	r3, [pc, #4]	@ (8001e70 <__errno+0x8>)
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000018 	.word	0x20000018

08001e74 <__libc_init_array>:
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	2600      	movs	r6, #0
 8001e78:	4d0c      	ldr	r5, [pc, #48]	@ (8001eac <__libc_init_array+0x38>)
 8001e7a:	4c0d      	ldr	r4, [pc, #52]	@ (8001eb0 <__libc_init_array+0x3c>)
 8001e7c:	1b64      	subs	r4, r4, r5
 8001e7e:	10a4      	asrs	r4, r4, #2
 8001e80:	42a6      	cmp	r6, r4
 8001e82:	d109      	bne.n	8001e98 <__libc_init_array+0x24>
 8001e84:	f000 fa50 	bl	8002328 <_init>
 8001e88:	2600      	movs	r6, #0
 8001e8a:	4d0a      	ldr	r5, [pc, #40]	@ (8001eb4 <__libc_init_array+0x40>)
 8001e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb8 <__libc_init_array+0x44>)
 8001e8e:	1b64      	subs	r4, r4, r5
 8001e90:	10a4      	asrs	r4, r4, #2
 8001e92:	42a6      	cmp	r6, r4
 8001e94:	d105      	bne.n	8001ea2 <__libc_init_array+0x2e>
 8001e96:	bd70      	pop	{r4, r5, r6, pc}
 8001e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e9c:	4798      	blx	r3
 8001e9e:	3601      	adds	r6, #1
 8001ea0:	e7ee      	b.n	8001e80 <__libc_init_array+0xc>
 8001ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ea6:	4798      	blx	r3
 8001ea8:	3601      	adds	r6, #1
 8001eaa:	e7f2      	b.n	8001e92 <__libc_init_array+0x1e>
 8001eac:	08002394 	.word	0x08002394
 8001eb0:	08002394 	.word	0x08002394
 8001eb4:	08002394 	.word	0x08002394
 8001eb8:	08002398 	.word	0x08002398

08001ebc <__retarget_lock_init_recursive>:
 8001ebc:	4770      	bx	lr

08001ebe <__retarget_lock_acquire_recursive>:
 8001ebe:	4770      	bx	lr

08001ec0 <__retarget_lock_release_recursive>:
 8001ec0:	4770      	bx	lr
	...

08001ec4 <_free_r>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	4605      	mov	r5, r0
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	d040      	beq.n	8001f4e <_free_r+0x8a>
 8001ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ed0:	1f0c      	subs	r4, r1, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bfb8      	it	lt
 8001ed6:	18e4      	addlt	r4, r4, r3
 8001ed8:	f000 f8de 	bl	8002098 <__malloc_lock>
 8001edc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f50 <_free_r+0x8c>)
 8001ede:	6813      	ldr	r3, [r2, #0]
 8001ee0:	b933      	cbnz	r3, 8001ef0 <_free_r+0x2c>
 8001ee2:	6063      	str	r3, [r4, #4]
 8001ee4:	6014      	str	r4, [r2, #0]
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001eec:	f000 b8da 	b.w	80020a4 <__malloc_unlock>
 8001ef0:	42a3      	cmp	r3, r4
 8001ef2:	d908      	bls.n	8001f06 <_free_r+0x42>
 8001ef4:	6820      	ldr	r0, [r4, #0]
 8001ef6:	1821      	adds	r1, r4, r0
 8001ef8:	428b      	cmp	r3, r1
 8001efa:	bf01      	itttt	eq
 8001efc:	6819      	ldreq	r1, [r3, #0]
 8001efe:	685b      	ldreq	r3, [r3, #4]
 8001f00:	1809      	addeq	r1, r1, r0
 8001f02:	6021      	streq	r1, [r4, #0]
 8001f04:	e7ed      	b.n	8001ee2 <_free_r+0x1e>
 8001f06:	461a      	mov	r2, r3
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	b10b      	cbz	r3, 8001f10 <_free_r+0x4c>
 8001f0c:	42a3      	cmp	r3, r4
 8001f0e:	d9fa      	bls.n	8001f06 <_free_r+0x42>
 8001f10:	6811      	ldr	r1, [r2, #0]
 8001f12:	1850      	adds	r0, r2, r1
 8001f14:	42a0      	cmp	r0, r4
 8001f16:	d10b      	bne.n	8001f30 <_free_r+0x6c>
 8001f18:	6820      	ldr	r0, [r4, #0]
 8001f1a:	4401      	add	r1, r0
 8001f1c:	1850      	adds	r0, r2, r1
 8001f1e:	4283      	cmp	r3, r0
 8001f20:	6011      	str	r1, [r2, #0]
 8001f22:	d1e0      	bne.n	8001ee6 <_free_r+0x22>
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4408      	add	r0, r1
 8001f2a:	6010      	str	r0, [r2, #0]
 8001f2c:	6053      	str	r3, [r2, #4]
 8001f2e:	e7da      	b.n	8001ee6 <_free_r+0x22>
 8001f30:	d902      	bls.n	8001f38 <_free_r+0x74>
 8001f32:	230c      	movs	r3, #12
 8001f34:	602b      	str	r3, [r5, #0]
 8001f36:	e7d6      	b.n	8001ee6 <_free_r+0x22>
 8001f38:	6820      	ldr	r0, [r4, #0]
 8001f3a:	1821      	adds	r1, r4, r0
 8001f3c:	428b      	cmp	r3, r1
 8001f3e:	bf01      	itttt	eq
 8001f40:	6819      	ldreq	r1, [r3, #0]
 8001f42:	685b      	ldreq	r3, [r3, #4]
 8001f44:	1809      	addeq	r1, r1, r0
 8001f46:	6021      	streq	r1, [r4, #0]
 8001f48:	6063      	str	r3, [r4, #4]
 8001f4a:	6054      	str	r4, [r2, #4]
 8001f4c:	e7cb      	b.n	8001ee6 <_free_r+0x22>
 8001f4e:	bd38      	pop	{r3, r4, r5, pc}
 8001f50:	20000274 	.word	0x20000274

08001f54 <sbrk_aligned>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	4e0f      	ldr	r6, [pc, #60]	@ (8001f94 <sbrk_aligned+0x40>)
 8001f58:	460c      	mov	r4, r1
 8001f5a:	6831      	ldr	r1, [r6, #0]
 8001f5c:	4605      	mov	r5, r0
 8001f5e:	b911      	cbnz	r1, 8001f66 <sbrk_aligned+0x12>
 8001f60:	f000 f9d2 	bl	8002308 <_sbrk_r>
 8001f64:	6030      	str	r0, [r6, #0]
 8001f66:	4621      	mov	r1, r4
 8001f68:	4628      	mov	r0, r5
 8001f6a:	f000 f9cd 	bl	8002308 <_sbrk_r>
 8001f6e:	1c43      	adds	r3, r0, #1
 8001f70:	d103      	bne.n	8001f7a <sbrk_aligned+0x26>
 8001f72:	f04f 34ff 	mov.w	r4, #4294967295
 8001f76:	4620      	mov	r0, r4
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
 8001f7a:	1cc4      	adds	r4, r0, #3
 8001f7c:	f024 0403 	bic.w	r4, r4, #3
 8001f80:	42a0      	cmp	r0, r4
 8001f82:	d0f8      	beq.n	8001f76 <sbrk_aligned+0x22>
 8001f84:	1a21      	subs	r1, r4, r0
 8001f86:	4628      	mov	r0, r5
 8001f88:	f000 f9be 	bl	8002308 <_sbrk_r>
 8001f8c:	3001      	adds	r0, #1
 8001f8e:	d1f2      	bne.n	8001f76 <sbrk_aligned+0x22>
 8001f90:	e7ef      	b.n	8001f72 <sbrk_aligned+0x1e>
 8001f92:	bf00      	nop
 8001f94:	20000270 	.word	0x20000270

08001f98 <_malloc_r>:
 8001f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f9c:	1ccd      	adds	r5, r1, #3
 8001f9e:	f025 0503 	bic.w	r5, r5, #3
 8001fa2:	3508      	adds	r5, #8
 8001fa4:	2d0c      	cmp	r5, #12
 8001fa6:	bf38      	it	cc
 8001fa8:	250c      	movcc	r5, #12
 8001faa:	2d00      	cmp	r5, #0
 8001fac:	4606      	mov	r6, r0
 8001fae:	db01      	blt.n	8001fb4 <_malloc_r+0x1c>
 8001fb0:	42a9      	cmp	r1, r5
 8001fb2:	d904      	bls.n	8001fbe <_malloc_r+0x26>
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	6033      	str	r3, [r6, #0]
 8001fb8:	2000      	movs	r0, #0
 8001fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002094 <_malloc_r+0xfc>
 8001fc2:	f000 f869 	bl	8002098 <__malloc_lock>
 8001fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8001fca:	461c      	mov	r4, r3
 8001fcc:	bb44      	cbnz	r4, 8002020 <_malloc_r+0x88>
 8001fce:	4629      	mov	r1, r5
 8001fd0:	4630      	mov	r0, r6
 8001fd2:	f7ff ffbf 	bl	8001f54 <sbrk_aligned>
 8001fd6:	1c43      	adds	r3, r0, #1
 8001fd8:	4604      	mov	r4, r0
 8001fda:	d158      	bne.n	800208e <_malloc_r+0xf6>
 8001fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8001fe0:	4627      	mov	r7, r4
 8001fe2:	2f00      	cmp	r7, #0
 8001fe4:	d143      	bne.n	800206e <_malloc_r+0xd6>
 8001fe6:	2c00      	cmp	r4, #0
 8001fe8:	d04b      	beq.n	8002082 <_malloc_r+0xea>
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	4639      	mov	r1, r7
 8001fee:	4630      	mov	r0, r6
 8001ff0:	eb04 0903 	add.w	r9, r4, r3
 8001ff4:	f000 f988 	bl	8002308 <_sbrk_r>
 8001ff8:	4581      	cmp	r9, r0
 8001ffa:	d142      	bne.n	8002082 <_malloc_r+0xea>
 8001ffc:	6821      	ldr	r1, [r4, #0]
 8001ffe:	4630      	mov	r0, r6
 8002000:	1a6d      	subs	r5, r5, r1
 8002002:	4629      	mov	r1, r5
 8002004:	f7ff ffa6 	bl	8001f54 <sbrk_aligned>
 8002008:	3001      	adds	r0, #1
 800200a:	d03a      	beq.n	8002082 <_malloc_r+0xea>
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	442b      	add	r3, r5
 8002010:	6023      	str	r3, [r4, #0]
 8002012:	f8d8 3000 	ldr.w	r3, [r8]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	bb62      	cbnz	r2, 8002074 <_malloc_r+0xdc>
 800201a:	f8c8 7000 	str.w	r7, [r8]
 800201e:	e00f      	b.n	8002040 <_malloc_r+0xa8>
 8002020:	6822      	ldr	r2, [r4, #0]
 8002022:	1b52      	subs	r2, r2, r5
 8002024:	d420      	bmi.n	8002068 <_malloc_r+0xd0>
 8002026:	2a0b      	cmp	r2, #11
 8002028:	d917      	bls.n	800205a <_malloc_r+0xc2>
 800202a:	1961      	adds	r1, r4, r5
 800202c:	42a3      	cmp	r3, r4
 800202e:	6025      	str	r5, [r4, #0]
 8002030:	bf18      	it	ne
 8002032:	6059      	strne	r1, [r3, #4]
 8002034:	6863      	ldr	r3, [r4, #4]
 8002036:	bf08      	it	eq
 8002038:	f8c8 1000 	streq.w	r1, [r8]
 800203c:	5162      	str	r2, [r4, r5]
 800203e:	604b      	str	r3, [r1, #4]
 8002040:	4630      	mov	r0, r6
 8002042:	f000 f82f 	bl	80020a4 <__malloc_unlock>
 8002046:	f104 000b 	add.w	r0, r4, #11
 800204a:	1d23      	adds	r3, r4, #4
 800204c:	f020 0007 	bic.w	r0, r0, #7
 8002050:	1ac2      	subs	r2, r0, r3
 8002052:	bf1c      	itt	ne
 8002054:	1a1b      	subne	r3, r3, r0
 8002056:	50a3      	strne	r3, [r4, r2]
 8002058:	e7af      	b.n	8001fba <_malloc_r+0x22>
 800205a:	6862      	ldr	r2, [r4, #4]
 800205c:	42a3      	cmp	r3, r4
 800205e:	bf0c      	ite	eq
 8002060:	f8c8 2000 	streq.w	r2, [r8]
 8002064:	605a      	strne	r2, [r3, #4]
 8002066:	e7eb      	b.n	8002040 <_malloc_r+0xa8>
 8002068:	4623      	mov	r3, r4
 800206a:	6864      	ldr	r4, [r4, #4]
 800206c:	e7ae      	b.n	8001fcc <_malloc_r+0x34>
 800206e:	463c      	mov	r4, r7
 8002070:	687f      	ldr	r7, [r7, #4]
 8002072:	e7b6      	b.n	8001fe2 <_malloc_r+0x4a>
 8002074:	461a      	mov	r2, r3
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	42a3      	cmp	r3, r4
 800207a:	d1fb      	bne.n	8002074 <_malloc_r+0xdc>
 800207c:	2300      	movs	r3, #0
 800207e:	6053      	str	r3, [r2, #4]
 8002080:	e7de      	b.n	8002040 <_malloc_r+0xa8>
 8002082:	230c      	movs	r3, #12
 8002084:	4630      	mov	r0, r6
 8002086:	6033      	str	r3, [r6, #0]
 8002088:	f000 f80c 	bl	80020a4 <__malloc_unlock>
 800208c:	e794      	b.n	8001fb8 <_malloc_r+0x20>
 800208e:	6005      	str	r5, [r0, #0]
 8002090:	e7d6      	b.n	8002040 <_malloc_r+0xa8>
 8002092:	bf00      	nop
 8002094:	20000274 	.word	0x20000274

08002098 <__malloc_lock>:
 8002098:	4801      	ldr	r0, [pc, #4]	@ (80020a0 <__malloc_lock+0x8>)
 800209a:	f7ff bf10 	b.w	8001ebe <__retarget_lock_acquire_recursive>
 800209e:	bf00      	nop
 80020a0:	2000026c 	.word	0x2000026c

080020a4 <__malloc_unlock>:
 80020a4:	4801      	ldr	r0, [pc, #4]	@ (80020ac <__malloc_unlock+0x8>)
 80020a6:	f7ff bf0b 	b.w	8001ec0 <__retarget_lock_release_recursive>
 80020aa:	bf00      	nop
 80020ac:	2000026c 	.word	0x2000026c

080020b0 <__sflush_r>:
 80020b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b6:	0716      	lsls	r6, r2, #28
 80020b8:	4605      	mov	r5, r0
 80020ba:	460c      	mov	r4, r1
 80020bc:	d454      	bmi.n	8002168 <__sflush_r+0xb8>
 80020be:	684b      	ldr	r3, [r1, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	dc02      	bgt.n	80020ca <__sflush_r+0x1a>
 80020c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	dd48      	ble.n	800215c <__sflush_r+0xac>
 80020ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80020cc:	2e00      	cmp	r6, #0
 80020ce:	d045      	beq.n	800215c <__sflush_r+0xac>
 80020d0:	2300      	movs	r3, #0
 80020d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80020d6:	682f      	ldr	r7, [r5, #0]
 80020d8:	6a21      	ldr	r1, [r4, #32]
 80020da:	602b      	str	r3, [r5, #0]
 80020dc:	d030      	beq.n	8002140 <__sflush_r+0x90>
 80020de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	0759      	lsls	r1, r3, #29
 80020e4:	d505      	bpl.n	80020f2 <__sflush_r+0x42>
 80020e6:	6863      	ldr	r3, [r4, #4]
 80020e8:	1ad2      	subs	r2, r2, r3
 80020ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80020ec:	b10b      	cbz	r3, 80020f2 <__sflush_r+0x42>
 80020ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020f0:	1ad2      	subs	r2, r2, r3
 80020f2:	2300      	movs	r3, #0
 80020f4:	4628      	mov	r0, r5
 80020f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80020f8:	6a21      	ldr	r1, [r4, #32]
 80020fa:	47b0      	blx	r6
 80020fc:	1c43      	adds	r3, r0, #1
 80020fe:	89a3      	ldrh	r3, [r4, #12]
 8002100:	d106      	bne.n	8002110 <__sflush_r+0x60>
 8002102:	6829      	ldr	r1, [r5, #0]
 8002104:	291d      	cmp	r1, #29
 8002106:	d82b      	bhi.n	8002160 <__sflush_r+0xb0>
 8002108:	4a28      	ldr	r2, [pc, #160]	@ (80021ac <__sflush_r+0xfc>)
 800210a:	410a      	asrs	r2, r1
 800210c:	07d6      	lsls	r6, r2, #31
 800210e:	d427      	bmi.n	8002160 <__sflush_r+0xb0>
 8002110:	2200      	movs	r2, #0
 8002112:	6062      	str	r2, [r4, #4]
 8002114:	6922      	ldr	r2, [r4, #16]
 8002116:	04d9      	lsls	r1, r3, #19
 8002118:	6022      	str	r2, [r4, #0]
 800211a:	d504      	bpl.n	8002126 <__sflush_r+0x76>
 800211c:	1c42      	adds	r2, r0, #1
 800211e:	d101      	bne.n	8002124 <__sflush_r+0x74>
 8002120:	682b      	ldr	r3, [r5, #0]
 8002122:	b903      	cbnz	r3, 8002126 <__sflush_r+0x76>
 8002124:	6560      	str	r0, [r4, #84]	@ 0x54
 8002126:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002128:	602f      	str	r7, [r5, #0]
 800212a:	b1b9      	cbz	r1, 800215c <__sflush_r+0xac>
 800212c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002130:	4299      	cmp	r1, r3
 8002132:	d002      	beq.n	800213a <__sflush_r+0x8a>
 8002134:	4628      	mov	r0, r5
 8002136:	f7ff fec5 	bl	8001ec4 <_free_r>
 800213a:	2300      	movs	r3, #0
 800213c:	6363      	str	r3, [r4, #52]	@ 0x34
 800213e:	e00d      	b.n	800215c <__sflush_r+0xac>
 8002140:	2301      	movs	r3, #1
 8002142:	4628      	mov	r0, r5
 8002144:	47b0      	blx	r6
 8002146:	4602      	mov	r2, r0
 8002148:	1c50      	adds	r0, r2, #1
 800214a:	d1c9      	bne.n	80020e0 <__sflush_r+0x30>
 800214c:	682b      	ldr	r3, [r5, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0c6      	beq.n	80020e0 <__sflush_r+0x30>
 8002152:	2b1d      	cmp	r3, #29
 8002154:	d001      	beq.n	800215a <__sflush_r+0xaa>
 8002156:	2b16      	cmp	r3, #22
 8002158:	d11d      	bne.n	8002196 <__sflush_r+0xe6>
 800215a:	602f      	str	r7, [r5, #0]
 800215c:	2000      	movs	r0, #0
 800215e:	e021      	b.n	80021a4 <__sflush_r+0xf4>
 8002160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002164:	b21b      	sxth	r3, r3
 8002166:	e01a      	b.n	800219e <__sflush_r+0xee>
 8002168:	690f      	ldr	r7, [r1, #16]
 800216a:	2f00      	cmp	r7, #0
 800216c:	d0f6      	beq.n	800215c <__sflush_r+0xac>
 800216e:	0793      	lsls	r3, r2, #30
 8002170:	bf18      	it	ne
 8002172:	2300      	movne	r3, #0
 8002174:	680e      	ldr	r6, [r1, #0]
 8002176:	bf08      	it	eq
 8002178:	694b      	ldreq	r3, [r1, #20]
 800217a:	1bf6      	subs	r6, r6, r7
 800217c:	600f      	str	r7, [r1, #0]
 800217e:	608b      	str	r3, [r1, #8]
 8002180:	2e00      	cmp	r6, #0
 8002182:	ddeb      	ble.n	800215c <__sflush_r+0xac>
 8002184:	4633      	mov	r3, r6
 8002186:	463a      	mov	r2, r7
 8002188:	4628      	mov	r0, r5
 800218a:	6a21      	ldr	r1, [r4, #32]
 800218c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002190:	47e0      	blx	ip
 8002192:	2800      	cmp	r0, #0
 8002194:	dc07      	bgt.n	80021a6 <__sflush_r+0xf6>
 8002196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800219a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800219e:	f04f 30ff 	mov.w	r0, #4294967295
 80021a2:	81a3      	strh	r3, [r4, #12]
 80021a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a6:	4407      	add	r7, r0
 80021a8:	1a36      	subs	r6, r6, r0
 80021aa:	e7e9      	b.n	8002180 <__sflush_r+0xd0>
 80021ac:	dfbffffe 	.word	0xdfbffffe

080021b0 <_fflush_r>:
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	690b      	ldr	r3, [r1, #16]
 80021b4:	4605      	mov	r5, r0
 80021b6:	460c      	mov	r4, r1
 80021b8:	b913      	cbnz	r3, 80021c0 <_fflush_r+0x10>
 80021ba:	2500      	movs	r5, #0
 80021bc:	4628      	mov	r0, r5
 80021be:	bd38      	pop	{r3, r4, r5, pc}
 80021c0:	b118      	cbz	r0, 80021ca <_fflush_r+0x1a>
 80021c2:	6a03      	ldr	r3, [r0, #32]
 80021c4:	b90b      	cbnz	r3, 80021ca <_fflush_r+0x1a>
 80021c6:	f7ff fc95 	bl	8001af4 <__sinit>
 80021ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f3      	beq.n	80021ba <_fflush_r+0xa>
 80021d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80021d4:	07d0      	lsls	r0, r2, #31
 80021d6:	d404      	bmi.n	80021e2 <_fflush_r+0x32>
 80021d8:	0599      	lsls	r1, r3, #22
 80021da:	d402      	bmi.n	80021e2 <_fflush_r+0x32>
 80021dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021de:	f7ff fe6e 	bl	8001ebe <__retarget_lock_acquire_recursive>
 80021e2:	4628      	mov	r0, r5
 80021e4:	4621      	mov	r1, r4
 80021e6:	f7ff ff63 	bl	80020b0 <__sflush_r>
 80021ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021ec:	4605      	mov	r5, r0
 80021ee:	07da      	lsls	r2, r3, #31
 80021f0:	d4e4      	bmi.n	80021bc <_fflush_r+0xc>
 80021f2:	89a3      	ldrh	r3, [r4, #12]
 80021f4:	059b      	lsls	r3, r3, #22
 80021f6:	d4e1      	bmi.n	80021bc <_fflush_r+0xc>
 80021f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021fa:	f7ff fe61 	bl	8001ec0 <__retarget_lock_release_recursive>
 80021fe:	e7dd      	b.n	80021bc <_fflush_r+0xc>

08002200 <__swhatbuf_r>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	460c      	mov	r4, r1
 8002204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002208:	4615      	mov	r5, r2
 800220a:	2900      	cmp	r1, #0
 800220c:	461e      	mov	r6, r3
 800220e:	b096      	sub	sp, #88	@ 0x58
 8002210:	da0c      	bge.n	800222c <__swhatbuf_r+0x2c>
 8002212:	89a3      	ldrh	r3, [r4, #12]
 8002214:	2100      	movs	r1, #0
 8002216:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800221a:	bf14      	ite	ne
 800221c:	2340      	movne	r3, #64	@ 0x40
 800221e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002222:	2000      	movs	r0, #0
 8002224:	6031      	str	r1, [r6, #0]
 8002226:	602b      	str	r3, [r5, #0]
 8002228:	b016      	add	sp, #88	@ 0x58
 800222a:	bd70      	pop	{r4, r5, r6, pc}
 800222c:	466a      	mov	r2, sp
 800222e:	f000 f849 	bl	80022c4 <_fstat_r>
 8002232:	2800      	cmp	r0, #0
 8002234:	dbed      	blt.n	8002212 <__swhatbuf_r+0x12>
 8002236:	9901      	ldr	r1, [sp, #4]
 8002238:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800223c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002240:	4259      	negs	r1, r3
 8002242:	4159      	adcs	r1, r3
 8002244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002248:	e7eb      	b.n	8002222 <__swhatbuf_r+0x22>

0800224a <__smakebuf_r>:
 800224a:	898b      	ldrh	r3, [r1, #12]
 800224c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800224e:	079d      	lsls	r5, r3, #30
 8002250:	4606      	mov	r6, r0
 8002252:	460c      	mov	r4, r1
 8002254:	d507      	bpl.n	8002266 <__smakebuf_r+0x1c>
 8002256:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800225a:	6023      	str	r3, [r4, #0]
 800225c:	6123      	str	r3, [r4, #16]
 800225e:	2301      	movs	r3, #1
 8002260:	6163      	str	r3, [r4, #20]
 8002262:	b003      	add	sp, #12
 8002264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002266:	466a      	mov	r2, sp
 8002268:	ab01      	add	r3, sp, #4
 800226a:	f7ff ffc9 	bl	8002200 <__swhatbuf_r>
 800226e:	9f00      	ldr	r7, [sp, #0]
 8002270:	4605      	mov	r5, r0
 8002272:	4639      	mov	r1, r7
 8002274:	4630      	mov	r0, r6
 8002276:	f7ff fe8f 	bl	8001f98 <_malloc_r>
 800227a:	b948      	cbnz	r0, 8002290 <__smakebuf_r+0x46>
 800227c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002280:	059a      	lsls	r2, r3, #22
 8002282:	d4ee      	bmi.n	8002262 <__smakebuf_r+0x18>
 8002284:	f023 0303 	bic.w	r3, r3, #3
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	81a3      	strh	r3, [r4, #12]
 800228e:	e7e2      	b.n	8002256 <__smakebuf_r+0xc>
 8002290:	89a3      	ldrh	r3, [r4, #12]
 8002292:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800229a:	81a3      	strh	r3, [r4, #12]
 800229c:	9b01      	ldr	r3, [sp, #4]
 800229e:	6020      	str	r0, [r4, #0]
 80022a0:	b15b      	cbz	r3, 80022ba <__smakebuf_r+0x70>
 80022a2:	4630      	mov	r0, r6
 80022a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022a8:	f000 f81e 	bl	80022e8 <_isatty_r>
 80022ac:	b128      	cbz	r0, 80022ba <__smakebuf_r+0x70>
 80022ae:	89a3      	ldrh	r3, [r4, #12]
 80022b0:	f023 0303 	bic.w	r3, r3, #3
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	81a3      	strh	r3, [r4, #12]
 80022ba:	89a3      	ldrh	r3, [r4, #12]
 80022bc:	431d      	orrs	r5, r3
 80022be:	81a5      	strh	r5, [r4, #12]
 80022c0:	e7cf      	b.n	8002262 <__smakebuf_r+0x18>
	...

080022c4 <_fstat_r>:
 80022c4:	b538      	push	{r3, r4, r5, lr}
 80022c6:	2300      	movs	r3, #0
 80022c8:	4d06      	ldr	r5, [pc, #24]	@ (80022e4 <_fstat_r+0x20>)
 80022ca:	4604      	mov	r4, r0
 80022cc:	4608      	mov	r0, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	602b      	str	r3, [r5, #0]
 80022d2:	f7fe f991 	bl	80005f8 <_fstat>
 80022d6:	1c43      	adds	r3, r0, #1
 80022d8:	d102      	bne.n	80022e0 <_fstat_r+0x1c>
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	b103      	cbz	r3, 80022e0 <_fstat_r+0x1c>
 80022de:	6023      	str	r3, [r4, #0]
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	bf00      	nop
 80022e4:	20000268 	.word	0x20000268

080022e8 <_isatty_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	2300      	movs	r3, #0
 80022ec:	4d05      	ldr	r5, [pc, #20]	@ (8002304 <_isatty_r+0x1c>)
 80022ee:	4604      	mov	r4, r0
 80022f0:	4608      	mov	r0, r1
 80022f2:	602b      	str	r3, [r5, #0]
 80022f4:	f7fe f98f 	bl	8000616 <_isatty>
 80022f8:	1c43      	adds	r3, r0, #1
 80022fa:	d102      	bne.n	8002302 <_isatty_r+0x1a>
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	b103      	cbz	r3, 8002302 <_isatty_r+0x1a>
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	20000268 	.word	0x20000268

08002308 <_sbrk_r>:
 8002308:	b538      	push	{r3, r4, r5, lr}
 800230a:	2300      	movs	r3, #0
 800230c:	4d05      	ldr	r5, [pc, #20]	@ (8002324 <_sbrk_r+0x1c>)
 800230e:	4604      	mov	r4, r0
 8002310:	4608      	mov	r0, r1
 8002312:	602b      	str	r3, [r5, #0]
 8002314:	f7fe f996 	bl	8000644 <_sbrk>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	d102      	bne.n	8002322 <_sbrk_r+0x1a>
 800231c:	682b      	ldr	r3, [r5, #0]
 800231e:	b103      	cbz	r3, 8002322 <_sbrk_r+0x1a>
 8002320:	6023      	str	r3, [r4, #0]
 8002322:	bd38      	pop	{r3, r4, r5, pc}
 8002324:	20000268 	.word	0x20000268

08002328 <_init>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	bf00      	nop
 800232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232e:	bc08      	pop	{r3}
 8002330:	469e      	mov	lr, r3
 8002332:	4770      	bx	lr

08002334 <_fini>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	bf00      	nop
 8002338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233a:	bc08      	pop	{r3}
 800233c:	469e      	mov	lr, r3
 800233e:	4770      	bx	lr
